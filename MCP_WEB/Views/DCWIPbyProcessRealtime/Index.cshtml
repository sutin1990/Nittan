<meta http-equiv='cache-control' content='no-cache'>
<meta http-equiv='expires' content='0'>
<meta http-equiv='pragma' content='no-cache'>
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    div.relative {
        position: relative;
        width: 100%;
        border: 1px solid lightgray;
        height: 50px;
    }

    div.absolute2 {
        position: absolute;
        /*top: 10px;*/
        left: 2%;
        width: 20%;
        /*height: 100px;*/
        /*border: 1px solid #73AD21;*/
    }

    div.absolute3 {
        position: absolute;
        top: 5px;        
        left: 32%;
        /*right: 30px;*/
        /*height: 100px;*/
    }

    div.absolute5 {
        position: absolute;
        /*top: 10px;*/
        left: 570px;
        width: 250px;
        /*height: 100px;*/
        /*border: 1px solid #73AD21;*/
    }
</style>
<form>
    <br /><div class="relative">        
        <div class="absolute2"><label style="padding-top:10px">Process:</label><div id="select_ProcessMaster" style="left:35%; width:100%; bottom:30px;"></div></div>
       
        <div class="absolute3">
            @(Html.DevExtreme().Button()
                            .ID("btnOK")
                            .Text("Ok")
                            .Type(ButtonType.Success)
                            .OnClick("filter")
            )
        </div>
    </div>

    <br />

    @(Html.DevExtreme().DataGrid<MCP_WEB.Models.DCWIPbyProcess>()
                                    .ID("gridContainer")
                                    .ShowBorders(true)
                                    
                                    .Export(e => e.Enabled(true).FileName("DCWIPbyProcess-" + DateTime.Now)                                 
                                    .AllowExportSelectedData(true))
                                    .ColumnChooser(c => c.Enabled(true))
                                    .AllowColumnResizing(true)
                                    .AllowColumnReordering(true)
                                    //.RemoteOperations(true)
                                    .ShowRowLines(true)
                                    //.ColumnHidingEnabled(true)
                                    .ColumnAutoWidth(true)
                                    .ColumnMinWidth(100)
                                    .Selection(s => s.Mode(SelectionMode.Multiple)
                                        .ShowCheckBoxesMode(GridSelectionShowCheckBoxesMode.Always)
                                        .SelectAllMode(SelectAllMode.Page)
                                        )

                                    .HoverStateEnabled(true)
                                    .RowAlternationEnabled(true)
                                    .Paging(paging => paging.PageSize(10))
                                    .Pager(p => p
                                        .AllowedPageSizes(new int[] { 10, 25, 50, 100 })
                                        .ShowInfo(true)
                                        .ShowNavigationButtons(true)
                                        .ShowPageSizeSelector(true)
                                        .Visible(true))

                                    //.DataSource(d => d.Mvc().Controller("ProductionDailyReport1").LoadAction("Get"))

                                    //.FilterPanel(f => f.Visible(true))
                                    .HeaderFilter(h => h.Visible(true))
                                    .FilterRow(filterRow => filterRow
                                            .Visible(true)
                                            .ApplyFilter(GridApplyFilterMode.Auto))
                                    .SearchPanel(searchPanel => searchPanel
                                        .Visible(true)
                                        .Width(240)
                                        .Placeholder("Search..."))

                                    .Columns(columns =>
                                    {
                                        columns.Add().DataField("FCode").Caption("F-Code");
                                        columns.Add().DataField("Model").Caption("Model");
                                        columns.Add().DataField("Barcode").Caption("Lot No.");
                                        columns.Add().DataField("QtyOrder").Caption("Order QTY").Format("#,##0.00");
                                        columns.Add().DataField("WIP").Caption("WIP QTY").Format("#,##0.00");
                                        columns.Add().DataField("WIPRate").Caption("%WIP").Format("#,##0.00");
                                        columns.Add().DataField("NC").Caption("NC QTY").Format("#,##0.00");
                                        columns.Add().DataField("NCRate").Caption("%NC").Format("#,##0.00");
                                        columns.Add().DataField("NG").Caption("NG QTY").Format("#,##0.00");
                                        columns.Add().DataField("NGRate").Caption("%NG").Format("#,##0.00");

                                    }) // end .Columns


    )
    <br />

    @(Html.DevExtreme().Button()
                            .ID("btnPrintPreviewT1")
                            .Text("Print")
                            .Type(ButtonType.Default)
            //.UseSubmitBehavior(true)
            .OnClick("PrintPreview")
    )

    <script>
        

    var sumQtyOrder = [];
    var sumWIP = [];
    var sumNG = [];
    var sumNC = [];
    var sumWIPRate = [];
    var sumNGRate = [];
    var sumNCRate = [];
    var source_m_Processmaster = DevExpress.data.AspNet.createStore({
                //"key": "ID",
                "loadUrl": "@Url.Action("Get_m_Processmaster", "GridDCWIPbyProcess", new { httproute = true })",
    });
    var display = "";
    var Process = "";
    $("#select_ProcessMaster").dxSelectBox({
        dataSource: source_m_Processmaster,
        displayExpr: function (e) {
            if (e) {
                display = e.ProcessName;
            }
            return display;
        },
        //displayExpr: "DepDesc",
        valueExpr: 'ProcessCode',
        searchEnabled: true,
        searchExpr: ["ProcessCode", "ProcessName"],

        itemTemplate: function (itemData) {
            return $("<div />").append(
                $("<p />").text(itemData.ProcessName)
                    .css("display", "inline-block")
            );
        },
        onValueChanged: function (e) {
            Process = e.value;
        },
    });

   
        const format = num => {
            const n = String(num),
                p = n.indexOf('.')
            return n.replace(
                /\d(?=(?:\d{3})+(?:\.|$))/g,
                (m, i) => p < 0 || i < p ? `${m},` : m
            )
        }

    function filter() {
        $("#gridContainer").dxDataGrid({
            export: {
                enabled: true,
                allowExportSelectedData: true,
                customizeExcelCell: e => {
                    if (e.gridCell.column.dataField === "QtyOrder") {
                        //console.log(e);
                        e.value = 42;
                    }
                }
            }

        });

        if (Process != "") {

            $.ajax({
                type: 'POST',
                url: "api/GridDCWIPbyProcess/Filter",
                data: { "Process": Process },
                async: false,
                dataType: 'json',
                success: function (result) {
                    //console.log(result);
                    $.each(result, function (item, value) {

                        source = value;
                    });

                    $("#gridContainer").dxDataGrid({
                        dataSource: result,
                        onCellPrepared: function (e) {
                            if (e.rowType === "data" && e.column.dataField === "QtyOrder" && e.rowIndex != undefined) {
                                sumQtyOrder.push(e.data.QtyOrder);
                            }
                            if (e.rowType === "data" && e.column.dataField === "WIP" && e.rowIndex != undefined) {
                                sumWIP.push(e.data.WIP);
                            }

                            if (e.rowType === "data" && e.column.dataField === "NG" && e.rowIndex != undefined) {
                                sumNG.push(e.data.NG);
                            }

                            if (e.rowType === "data" && e.column.dataField === "NC" && e.rowIndex != undefined) {
                                sumNC.push(e.data.NC);
                            }

                            if (e.rowType === "data" && e.column.dataField === "WIPRate" && e.rowIndex != undefined) {
                                sumWIPRate.push(e.data.WIPRate);
                            }

                            if (e.rowType === "data" && e.column.dataField === "NGRate" && e.rowIndex != undefined) {
                                sumNGRate.push(e.data.NGRate);
                            }

                            if (e.rowType === "data" && e.column.dataField === "NCRate" && e.rowIndex != undefined) {
                                sumNCRate.push(e.data.NCRate);
                            }

                        },
                        customizeExportData: function (cols, rows) {
                            var total1 = sumQtyOrder.reduce((a, b) => parseFloat(a) + parseFloat(b), 0);
                            rows.forEach(function (row) {
                                //console.log(row);
                                var total1 = 0;
                                var total2 = 0;
                                var total3 = 0;
                                var total4 = 0;
                                
                                if (row.rowType == "totalFooter") {//ดึงข้อมูลส่วนของ totalFooter ในแต่ละ column มา set ค่า ตอน export excel
                                    var rowValues = row.values;
                                    //console.log(rowValues);
                                    for (i = 0; i < rowValues.length; i++) {

                                        if (typeof (rowValues[i]) === 'object') {
                                            console.log(rowValues[i].name);
                                            if (rowValues[i].name === 'QtyOrder') {
                                                total1 = parseFloat(rowValues[i].value);                                                
                                            }
                                            if (rowValues[i].name === 'WIP') {
                                                total2 = parseFloat(rowValues[i].value);                                                
                                            }
                                            if (rowValues[i].name === 'NC') {
                                                total3 = parseFloat(rowValues[i].value);
                                            }
                                            if (rowValues[i].name === 'NG') {
                                                total4 = parseFloat(rowValues[i].value);
                                            }
                                            if (rowValues[i].name === 'WIPRate') {
                                                //rowValues[i].value = format(parseFloat((total2 / total1) * 100).toFixed(2)).toString();
                                                rowValues[i].value = parseFloat((total2 / total1) * 100);
                                            }
                                            if (rowValues[i].name === 'NCRate') {
                                                //rowValues[i].value = format(parseFloat((total3 / total1) * 100).toFixed(2)).toString();
                                                rowValues[i].value = parseFloat((total3 / total1) * 100);
                                            }
                                            if (rowValues[i].name === 'NGRate') {
                                                //rowValues[i].value = format(parseFloat((total4 / total1) * 100).toFixed(2)).toString();
                                                rowValues[i].value = parseFloat((total4 / total1) * 100);
                                            }
                                        }
                                    }
                                }
                            });
                        },
                        onContentReady: function (e) {
                            var gridItems = $("#gridContainer").dxDataGrid('instance');

                            var total1 = sumQtyOrder.reduce((a, b) => parseFloat(a) + parseFloat(b), 0);
                            var total2 = sumWIP.reduce((a, b) => parseFloat(a) + parseFloat(b), 0);
                            var total3 = sumNC.reduce((a, b) => parseFloat(a) + parseFloat(b), 0);
                            var total4 = sumNG.reduce((a, b) => parseFloat(a) + parseFloat(b), 0);
                            sumQtyOrder = [];
                            sumWIP = [];
                            sumNG = [];
                            sumNC = [];
                            sumWIPRate = [];
                            sumNGRate = [];
                            sumNCRate = [];

                            var summaryCells = e.component.getController('data').footerItems()[0].summaryCells;
                            $.each(summaryCells, function (item, value) {
                                if (value.length > 0) {
                                    //console.log(item + "=>" + value[0].name);
                                    var name = value[0].name;
                                    if (name == "QtyOrder") {
                                        gridItems.getController('data').footerItems()[0].summaryCells[item][0].value = format(parseFloat(total1).toFixed(2)).toString();
                                    }
                                    if (name == "WIP") {
                                        gridItems.getController('data').footerItems()[0].summaryCells[item][0].value = format(parseFloat(total2).toFixed(2)).toString();
                                    }
                                    if (name == "WIPRate") {
                                        if (total1 == 0 || total2 == 0) {
                                            gridItems.getController('data').footerItems()[0].summaryCells[item][0].value = format(parseFloat(0).toFixed(2)).toString();
                                        } else {
                                            gridItems.getController('data').footerItems()[0].summaryCells[item][0].value = format(parseFloat((total2 / total1) * 100).toFixed(2)).toString();
                                        }
                                        
                                    }
                                    if (name == "NC") {
                                        gridItems.getController('data').footerItems()[0].summaryCells[item][0].value = format(parseFloat(total3).toFixed(2)).toString();
                                    }
                                    if (name == "NCRate") {
                                        if (total1 == 0 || total3 == 0 ) {
                                            gridItems.getController('data').footerItems()[0].summaryCells[item][0].value = format(parseFloat(0).toFixed(2)).toString();
                                        } else {
                                            gridItems.getController('data').footerItems()[0].summaryCells[item][0].value = format(parseFloat((total3 / total1) * 100).toFixed(2)).toString();
                                        }
                                    }
                                    if (name == "NG") {
                                        gridItems.getController('data').footerItems()[0].summaryCells[item][0].value = format(parseFloat(total4).toFixed(2)).toString();
                                    }
                                    if (name == "NGRate") {
                                        if (total1 == 0 || total4 == 0) {
                                            gridItems.getController('data').footerItems()[0].summaryCells[item][0].value = format(parseFloat(0).toFixed(2)).toString();
                                        } else {
                                            gridItems.getController('data').footerItems()[0].summaryCells[item][0].value = format(parseFloat((total4 / total1) * 100).toFixed(2)).toString();
                                        }
                                        
                                    }
                                    gridItems.getView('footerView').render();
                                }

                            });
                            NotSelection(gridItems);
                            //var colCount = e.component.columnCount();
                            //for (var i = 0; i < colCount; i++) {
                            //    var position = e.component.columnOption(i, "visibleIndex") + "=>" + e.component.columnOption(i, "dataField");
                            //    //console.log(position);
                            //    var column = e.component.columnOption(i, "dataField");
                            //    var index = e.component.columnOption(i, "visibleIndex") + 1;
                            //    //console.log(column);
                            //    if (column == "QtyOrder") {
                            //        gridItems.getController('data').footerItems()[0].summaryCells[index][0].value = format(parseFloat(total1).toFixed(2)).toString();
                            //    }
                            //    if (column == "WIP") {
                            //        gridItems.getController('data').footerItems()[0].summaryCells[index][0].value = format(parseFloat(total2).toFixed(2)).toString();
                            //    }
                            //    if (column == "WIPRate") {
                            //        gridItems.getController('data').footerItems()[0].summaryCells[index][0].value = format(parseFloat(total2/total1).toFixed(2)).toString();
                            //    }
                            //    if (column == "NC") {
                            //        gridItems.getController('data').footerItems()[0].summaryCells[index][0].value = format(parseFloat(total3).toFixed(2)).toString();
                            //    }
                            //    if (column == "NCRate") {                                    
                            //        gridItems.getController('data').footerItems()[0].summaryCells[index][0].value = format(parseFloat(total3/total1).toFixed(2)).toString();
                            //    }
                            //    if (column == "NG") {
                            //        gridItems.getController('data').footerItems()[0].summaryCells[index][0].value = format(parseFloat(total4).toFixed(2)).toString();
                            //    }
                            //    if (column == "NGRate") {
                            //        gridItems.getController('data').footerItems()[0].summaryCells[index][0].value = format(parseFloat(total4/total1).toFixed(2)).toString();
                            //    }
                            //    gridItems.getView('footerView').render();
                            //}
                        },
                        summary: {
                            calculateCustomSummary: function (options) {
                                if (options.name == "QtyOrder") {
                                    if (options.summaryProcess == "start") {
                                        options.totalValue = 0;
                                    }
                                    if (options.summaryProcess == "calculate") {
                                        if (options.value) {
                                            options.totalValue += options.value["QtyOrder"];
                                        }
                                    }
                                }
                                if (options.name == "WIP") {
                                    if (options.summaryProcess == "start") {
                                        options.totalValue = 0;
                                    }
                                    if (options.summaryProcess == "calculate") {
                                        if (options.value) {
                                            options.totalValue += options.value["WIP"];
                                        }
                                    }
                                }
                                
                                if (options.name == "NC") {
                                    if (options.summaryProcess == "start") {
                                        options.totalValue = 0;
                                    }
                                    if (options.summaryProcess == "calculate") {
                                        if (options.value) {
                                            options.totalValue += options.value["NC"];
                                        }
                                    }
                                }
                                
                                if (options.name == "NG") {
                                    if (options.summaryProcess == "start") {
                                        options.totalValue = 0;
                                    }
                                    if (options.summaryProcess == "calculate") {
                                        if (options.value) {
                                            options.totalValue += options.value["NG"];
                                        }
                                    }
                                }
                               
                            },
                            totalItems: [
                                {
                                    column: "Barcode",
                                    alignment: "right",
                                    customizeText: function (data) {
                                        return "Total:";
                                    }
                                },
                                {
                                    showInColumn: "QtyOrder",
                                    name: "QtyOrder",
                                    summaryType: "custom",
                                    alignment: "right",
                                    valueFormat: "#,##0",                                   
                                }, {
                                    showInColumn: "WIP",
                                    name: "WIP",
                                    summaryType: "custom",
                                    alignment: "right",
                                    valueFormat: "#,##0",
                                    
                                }, {
                                    showInColumn: "WIPRate",
                                    name: "WIPRate",
                                    summaryType: "custom",
                                    alignment: "right",
                                    valueFormat: "#,##0",                                    
                                }, {
                                    showInColumn: "NC",
                                    name: "NC",
                                    summaryType: "custom",
                                    alignment: "right",
                                    valueFormat: "#,##0",                                    
                                }, {
                                    showInColumn: "NCRate",
                                    name: "NCRate",
                                    summaryType: "custom",
                                    alignment: "right",
                                    valueFormat: "#,##0",                                   
                                }, {
                                    showInColumn: "NG",
                                    name: "NG",
                                    summaryType: "custom",
                                    alignment: "right",
                                    valueFormat: "#,##0",                                    
                                }, {
                                    showInColumn: "NGRate",
                                    name: "NGRate",
                                    summaryType: "custom",
                                    alignment: "right",
                                    valueFormat: "#,##0",
                                    
                                }]
                        },
                        //export: {
                        //    enabled: true,
                        //    allowExportSelectedData:true,
                        //    customizeExcelCell: options => {
                        //        //console.log(options);
                        //        var gridCell = options.gridCell;
                                
                        //        if (gridCell) {
                        //            if (gridCell.rowType === 'data') {
                        //                if (gridCell.column.dataField === 'NCRate') {
                        //                    options.backgroundColor = '#FFBB00';
                        //                    options.font.color = '#AAAAAA';
                        //                }
                        //            }
                        //            //if (gridCell.rowType === 'totalFooter' && gridCell.column.dataField === 'QtyOrder') {
                        //            //    options.value = options.gridCell.value;
                        //            //    options.numberFormat = "&quot;Total Sum: &quot;$0.00";
                        //            //}                    
                        //        }
                        //    }
                        //}
                    }
                    

                    );
                    $("#gridContainer").dxDataGrid("instance").refresh();

                },
                error: function (ob, errStr) {
                    DevExpress.ui.notify(errStr, "not available in the database", 2000);
                }
            });
        }

        }

    function PrintPreview(data) {
        var grid = $('#gridContainer').dxDataGrid('instance');
        var keys = grid.getSelectedRowKeys();
        var text = "";
        var s;
        var comma = 0;
        //var checkslectDN = false;
        if (keys.length > 0) {
            for (s in keys) {
                comma = parseInt(s) + 1;
                if (comma == keys.length) {
                    text += keys[s].RowNumber;
                }
                else {
                    text += keys[s].RowNumber + ",";
                }
            }
           
            $.ajax({
                type: 'POST',
                url: "api/GridDCWIPbyProcess/Print",
                data: { "RowNumber": text },
                //contentType: "application/json; charset=utf-8",
                //dataType: "html",
                //async: false,
                //dataType: 'json',
                success: function (e) {                    
                    
                    if (e) {
                        window.open('@Url.Action("Index", "PrintDCWIPbyProcess")?process=' + Process, '_blank').focus();
                        //window.open('PrintWipMovement/Index?fromdate=' + startdateBox + '&todate=' + enddateBox + '&process=' + Process + '&FCode=' + FCode + '&ItemCode=' + ItemCode + '&Model=' + Model);
                    }
                   
                }
            });


        } else {
            var errorcustomDialog = DevExpress.ui.dialog.custom({
                title: 'print DC WIP by Process(Realtime) ! ',
                message: 'Please select Row Data.',
                toolbarItems: [
                    { text: "Close", onClick: function () { return "Ok" } },
                    //{ text: "Not Ok", onClick: function () { return "Not Ok" } }
                ],
                width: "500px"

            });
            errorcustomDialog.show().done(function (dialogResult) {
                //focus something
            });
        }


    }
    </script>

    
    @*@Html.ActionLink("cccc", "PrintProductionDailyReport1", "ProductionDailyReport1_Print", null, new { target = "_blank" })*@
</form>