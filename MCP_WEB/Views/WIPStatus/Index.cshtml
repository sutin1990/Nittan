<meta http-equiv='cache-control' content='no-cache'>
<meta http-equiv='expires' content='0'>
<meta http-equiv='pragma' content='no-cache'>
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    div.relative {
        position: relative;
        width: 100%;
        border: 1px solid lightgray;
        height: 60px;
    }

    div.absolute1 {
        position: absolute;
        left: 20px;
        width: 250px;
        /*height: 100px;*/
        /*border: 1px solid #73AD21;*/
    }



    div.absolute3 {
        position: absolute;
        top: 5px;
        left: 300px;
        /*right: 30px;*/
        /*height: 100px;*/
    }


</style>
<form>
    <br /><div class="relative">
        <div class="absolute1"><label style="padding-top:10px">ToDay:</label><div id="startdateBox" style="left:80px; bottom:30px;"></div></div>
       
        <div class="absolute3">
            @(Html.DevExtreme().Button()
                                            .ID("btnOK")
                                            .Text("Ok")
                                            .Type(ButtonType.Success)
                                            .OnClick("filter")
            )
        </div>
    </div>

    <br />

    @(Html.DevExtreme().DataGrid<MCP_WEB.Models.WIPStatus>()
                                            .ID("gridContainer")
                                            .ShowBorders(true)
                                            .Export(e => e.Enabled(true).FileName("WIPStatus-" + DateTime.Now).AllowExportSelectedData(true))
                                            .ColumnChooser(c => c.Enabled(true))
                                            .AllowColumnResizing(true)
                                            .AllowColumnReordering(true)
                                            //.RemoteOperations(true)
                                            .ShowRowLines(true)
                                            //.ColumnHidingEnabled(true)
                                            .ColumnAutoWidth(true)
                                            .ColumnMinWidth(100)
                                            .Selection(s => s.Mode(SelectionMode.Multiple)
                                                .ShowCheckBoxesMode(GridSelectionShowCheckBoxesMode.Always)
                                                .SelectAllMode(SelectAllMode.Page)
                                                )

                                            .HoverStateEnabled(true)
                                            .RowAlternationEnabled(true)
                                            .Paging(paging => paging.PageSize(10))
                                            .Pager(p => p
                                                .AllowedPageSizes(new int[] { 10, 25, 50, 100 })
                                                .ShowInfo(true)
                                                .ShowNavigationButtons(true)
                                                .ShowPageSizeSelector(true)
                                                .Visible(true))

                                            //.DataSource(d => d.Mvc().Controller("ProductionDailyReport1").LoadAction("Get"))

                                            //.FilterPanel(f => f.Visible(true))
                                            .HeaderFilter(h => h.Visible(true))
                                            .FilterRow(filterRow => filterRow
                                                    .Visible(true)
                                                    .ApplyFilter(GridApplyFilterMode.Auto))
                                            .SearchPanel(searchPanel => searchPanel
                                                .Visible(true)
                                                .Width(240)
                                                .Placeholder("Search..."))

                                                .Columns(columns =>
                                                {
                                                    columns.Add().DataField("Asof").Caption("Asof").Visible(false).DataType(GridColumnDataType.DateTime).Format(ViewBag.GlobalDtFormat);
                                                    columns.Add().DataField("MachineCode").Caption("M/C Line");
                                                    columns.Add().DataField("FCode").Caption("F-Code");
                                                    columns.Add().DataField("Model").Caption("Model");
                                                    columns.Add().DataField("CUTOFFBAR").Caption("CUTOFFBAR").Format("#,##0");
                                                    columns.Add().DataField("FRICTION").Caption("FRICTION").Format("#,##0");
                                                    columns.Add().DataField("FORGING").Caption("FORGING").Format("#,##0");
                                                    columns.Add().DataField("STELLITE_TIP").Caption("STELLITETIP").Format("#,##0");
                                                    columns.Add().DataField("STELLITE_SEAT").Caption("STELLITESEAT").Format("#,##0");
                                                    columns.Add().DataField("STRAIGHTENING").Caption("STRAIGHTENING").Format("#,##0");
                                                    columns.Add().DataField("STEM_ROUGH").Caption("STEMROUGH").Format("#,##0");
                                                    columns.Add().DataField("STEM_FINISH").Caption("STEMFINISH").Format("#,##0");
                                                    columns.Add().DataField("ISONITE").Caption("ISONITE").Format("#,##0");
                                                    columns.Add().DataField("SEAT_FINISH").Caption("SEATFINISH").Format("#,##0");
                                                    columns.Add().DataField("QC").Caption("QC").Format("#,##0");
                                                    columns.Add().DataField("QtyMove").Caption("Total").Format("#,##0");

                                                }) // end .Columns



    )
    <br />

    @(Html.DevExtreme().Button()
                    .ID("btnPrintPreviewT1")
                    .Text("Print")
                    .Type(ButtonType.Default)
            //.UseSubmitBehavior(true)
                    .OnClick("PrintPreview")
    )

    <script>
        var sumCUTOFFBAR = [];
        var sumFRICTION = [];
        var sumFORGING = [];
        var sumSTELLITE_TIP = [];
        var sumSTELLITE_SEAT = [];
        var sumSTRAIGHTENING = [];
        var sumSTEM_ROUGH = [];
        var sumSTEM_FINISH = [];
        var sumISONITE = [];
        var sumSEAT_FINISH = [];
        var sumQC = [];
        var sumTotal = [];
    
        var startdateBox = new Date();
        var month = startdateBox.getMonth() + 1;
        var day = startdateBox.getDate();
        if (month < 10) { month = "0" + month; }
        if (day < 10) { day = "0" + day; }
        startdateBox = startdateBox.getFullYear() + "-" + month + "-" + day;
   

    $("#startdateBox").dxDateBox({
        min: new Date(2000, 0, 1),
        max: new Date(2029, 11, 31),
        value: new Date(),
        displayFormat: "dd/MM/yyyy",
        formatString: 'shortdate',
        onValueChanged: function (e) {
            //var ed = $("#enddateBox").dxDateBox('instance').option('value');
            //if (e.value.getTime() >= ed.getTime()) {
            //    $("#enddateBox").dxDateBox("instance").option("isValid", true);//clear validate dateBox
            //}
            startdateBox = e.value;
             month = startdateBox.getMonth() + 1;
             day = startdateBox.getDate();
            if (month < 10) { month = "0" + month;}
            if (day < 10) { day = "0" + day;}
            startdateBox = startdateBox.getFullYear() + "-" + month + "-" + day;

        },

    }).dxValidator({
        validationRules: [{
            type: "required",
            message: "From Date is required."
        },
        //{
        //    type: "custom",
        //    message: "please select again From Date Must not be over To Date.",
        //    validationCallback: function (e) {
        //        var ed = $("#enddateBox").dxDateBox('instance').option('value');
        //        var sd = e.value;
        //        return sd && ed && sd.getTime() <= ed.getTime();
        //    }
        //}
        ]
    });

        const format = num => {
            const n = String(num),
                p = n.indexOf('.')
            return n.replace(
                /\d(?=(?:\d{3})+(?:\.|$))/g,
                (m, i) => p < 0 || i < p ? `${m},` : m
            )
        }


    function filter() {
        //var check_enddate = $("#enddateBox").dxDateBox("instance").option('isValid');
        var check_startdate = $("#startdateBox").dxDateBox("instance").option('isValid');

        if (check_startdate == true) {

            //console.log("start:", startdateBox);
            //console.log("end:", enddateBox);
            $.ajax({
                type: 'POST',
                url: "api/GridWIPStatus/Filter",
                //data: { "fromdate": startdateBox, "Process": Process, "machinemaste": machinemaste },
                async: false,
                dataType: 'json',
                success: function (result) {
                    //console.log(result);
                    $.each(result, function (item, value) {

                        source = value;
                    });

                    $("#gridContainer").dxDataGrid({
                        dataSource: result,
                        onCellPrepared: function (e) {
                            if (e.rowType === "data" && e.column.dataField === "CUTOFFBAR" && e.rowIndex != undefined) {
                                sumCUTOFFBAR.push(e.data.CUTOFFBAR);
                            }
                            if (e.rowType === "data" && e.column.dataField === "FRICTION" && e.rowIndex != undefined) {
                                sumFRICTION.push(e.data.FRICTION);
                            }
                            if (e.rowType === "data" && e.column.dataField === "FORGING" && e.rowIndex != undefined) {
                                sumFORGING.push(e.data.FORGING);
                            }

                            if (e.rowType === "data" && e.column.dataField === "STELLITE_TIP" && e.rowIndex != undefined) {
                                sumSTELLITE_TIP.push(e.data.STELLITE_TIP);
                            }

                            if (e.rowType === "data" && e.column.dataField === "STELLITE_SEAT" && e.rowIndex != undefined) {
                                sumSTELLITE_SEAT.push(e.data.STELLITE_SEAT);
                            }

                            if (e.rowType === "data" && e.column.dataField === "STRAIGHTENING" && e.rowIndex != undefined) {
                                sumSTRAIGHTENING.push(e.data.STRAIGHTENING);
                            }

                            if (e.rowType === "data" && e.column.dataField === "STEM_ROUGH" && e.rowIndex != undefined) {
                                sumSTEM_ROUGH.push(e.data.STEM_ROUGH);
                            }

                            if (e.rowType === "data" && e.column.dataField === "STEM_FINISH" && e.rowIndex != undefined) {
                                sumSTEM_FINISH.push(e.data.STEM_FINISH);
                            }

                            if (e.rowType === "data" && e.column.dataField === "ISONITE" && e.rowIndex != undefined) {
                                sumISONITE.push(e.data.ISONITE);
                            }

                            if (e.rowType === "data" && e.column.dataField === "SEAT_FINISH" && e.rowIndex != undefined) {
                                sumSEAT_FINISH.push(e.data.SEAT_FINISH);
                            }

                            if (e.rowType === "data" && e.column.dataField === "QC" && e.rowIndex != undefined) {
                                sumQC.push(e.data.QC);
                            }

                            if (e.rowType === "data" && e.column.dataField === "QtyMove" && e.rowIndex != undefined) {
                                sumTotal.push(e.data.QtyMove);
                            }
                        },
                        onContentReady: function (e) {
                             sumCUTOFFBAR = [];
                             sumFRICTION = [];
                             sumFORGING = [];
                             sumSTELLITE_TIP = [];
                             sumSTELLITE_SEAT = [];
                             sumSTRAIGHTENING = [];
                             sumSTEM_ROUGH = [];
                             sumSTEM_FINISH = [];
                             sumISONITE = [];
                             sumSEAT_FINISH = [];
                             sumQC = [];
                             sumTotal = [];
                        },
                        summary: {
                            totalItems: [{
                                column: "Model",
                                alignment: "right",
                                customizeText: function (data) {
                                    return "Total:";
                                }
                            },{
                                column: "CUTOFFBAR",
                                summaryType: "sum",
                                alignment: "right",
                                valueFormat: "#,##0",
                                displayFormat: "#,##0",
                                customizeText: function (data) {
                                    //console.log(sumQtyMove.join(''));
                                    //var sum = sumDigits(sumQtyMove.join(''));
                                    var sum = sumCUTOFFBAR.reduce((a, b) => parseFloat(a) + parseFloat(b), 0);
                                    var total = sum.toLocaleString(
                                        undefined, // leave undefined to use the browser's locale,
                                        // or use a string like 'en-US' to override it.
                                        { minimumFractionDigits: 0 }
                                    ); 
                                    return format(sum);
                                }
                            }, {
                                    column: "FRICTION",
                                    summaryType: "sum",
                                    alignment: "right",
                                    valueFormat: "#,##0",
                                    displayFormat: "#,##0",
                                    customizeText: function (data) {
                                        //console.log(sumQtyMove.join(''));
                                        //var sum = sumDigits(sumQtyMove.join(''));
                                        var sum = sumFRICTION.reduce((a, b) => parseFloat(a) + parseFloat(b), 0);
                                        var total = sum.toLocaleString(
                                            undefined, // leave undefined to use the browser's locale,
                                            // or use a string like 'en-US' to override it.
                                            { minimumFractionDigits: 0 }
                                        );
                                        return format(sum);
                                    }
                                }, {
                                    column: "FORGING",
                                    summaryType: "sum",
                                    alignment: "right",
                                    valueFormat: "#,##0",
                                    displayFormat: "#,##0",
                                    customizeText: function (data) {
                                        //console.log(sumQtyMove.join(''));
                                        //var sum = sumDigits(sumQtyMove.join(''));
                                        var sum = sumFORGING.reduce((a, b) => parseFloat(a) + parseFloat(b), 0);
                                        var total = sum.toLocaleString(
                                            undefined, // leave undefined to use the browser's locale,
                                            // or use a string like 'en-US' to override it.
                                            { minimumFractionDigits: 0 }
                                        );
                                        return format(sum);
                                    }
                                }, {
                                    column: "STELLITE_TIP",
                                    summaryType: "sum",
                                    alignment: "right",
                                    valueFormat: "#,##0",
                                    displayFormat: "#,##0",
                                    customizeText: function (data) {
                                        //console.log(sumQtyMove.join(''));
                                        //var sum = sumDigits(sumQtyMove.join(''));
                                        var sum = sumSTELLITE_TIP.reduce((a, b) => parseFloat(a) + parseFloat(b), 0);
                                        var total = sum.toLocaleString(
                                            undefined, // leave undefined to use the browser's locale,
                                            // or use a string like 'en-US' to override it.
                                            { minimumFractionDigits: 0 }
                                        );
                                        return format(sum);
                                    }
                                }, {
                                    column: "STELLITE_SEAT",
                                    summaryType: "sum",
                                    alignment: "right",
                                    valueFormat: "#,##0",
                                    displayFormat: "#,##0",
                                    customizeText: function (data) {
                                        //console.log(sumQtyMove.join(''));
                                        //var sum = sumDigits(sumQtyMove.join(''));
                                        var sum = sumSTELLITE_SEAT.reduce((a, b) => parseFloat(a) + parseFloat(b), 0);
                                        var total = sum.toLocaleString(
                                            undefined, // leave undefined to use the browser's locale,
                                            // or use a string like 'en-US' to override it.
                                            { minimumFractionDigits: 0 }
                                        );
                                        return format(sum);
                                    }
                                }, {
                                    column: "STRAIGHTENING",
                                    summaryType: "sum",
                                    alignment: "right",
                                    valueFormat: "#,##0",
                                    displayFormat: "#,##0",
                                    customizeText: function (data) {
                                        //console.log(sumQtyMove.join(''));
                                        //var sum = sumDigits(sumQtyMove.join(''));
                                        var sum = sumSTRAIGHTENING.reduce((a, b) => parseFloat(a) + parseFloat(b), 0);
                                        var total = sum.toLocaleString(
                                            undefined, // leave undefined to use the browser's locale,
                                            // or use a string like 'en-US' to override it.
                                            { minimumFractionDigits: 0 }
                                        );
                                        return format(sum);
                                    }
                                }, {
                                    column: "STEM_ROUGH",
                                    summaryType: "sum",
                                    alignment: "right",
                                    valueFormat: "#,##0",
                                    displayFormat: "#,##0",
                                    customizeText: function (data) {
                                        //console.log(sumQtyMove.join(''));
                                        //var sum = sumDigits(sumQtyMove.join(''));
                                        var sum = sumSTEM_ROUGH.reduce((a, b) => parseFloat(a) + parseFloat(b), 0);
                                        var total = sum.toLocaleString(
                                            undefined, // leave undefined to use the browser's locale,
                                            // or use a string like 'en-US' to override it.
                                            { minimumFractionDigits: 0 }
                                        );
                                        return format(sum);
                                    }
                                }, {
                                    column: "STEM_FINISH",
                                    summaryType: "sum",
                                    alignment: "right",
                                    valueFormat: "#,##0",
                                    displayFormat: "#,##0",
                                    customizeText: function (data) {
                                        //console.log(sumQtyMove.join(''));
                                        //var sum = sumDigits(sumQtyMove.join(''));
                                        var sum = sumSTEM_FINISH.reduce((a, b) => parseFloat(a) + parseFloat(b), 0);
                                        var total = sum.toLocaleString(
                                            undefined, // leave undefined to use the browser's locale,
                                            // or use a string like 'en-US' to override it.
                                            { minimumFractionDigits: 0 }
                                        );
                                        return format(sum);
                                    }
                                }, {
                                    column: "ISONITE",
                                    summaryType: "sum",
                                    alignment: "right",
                                    valueFormat: "#,##0",
                                    displayFormat: "#,##0",
                                    customizeText: function (data) {
                                        //console.log(sumQtyMove.join(''));
                                        //var sum = sumDigits(sumQtyMove.join(''));
                                        var sum = sumISONITE.reduce((a, b) => parseFloat(a) + parseFloat(b), 0);
                                        var total = sum.toLocaleString(
                                            undefined, // leave undefined to use the browser's locale,
                                            // or use a string like 'en-US' to override it.
                                            { minimumFractionDigits: 0 }
                                        );
                                        return format(sum);
                                    }
                                }, {
                                    column: "SEAT_FINISH",
                                    summaryType: "sum",
                                    alignment: "right",
                                    valueFormat: "#,##0",
                                    displayFormat: "#,##0",
                                    customizeText: function (data) {
                                        //console.log(sumQtyMove.join(''));
                                        //var sum = sumDigits(sumQtyMove.join(''));
                                        var sum = sumSEAT_FINISH.reduce((a, b) => parseFloat(a) + parseFloat(b), 0);
                                        var total = sum.toLocaleString(
                                            undefined, // leave undefined to use the browser's locale,
                                            // or use a string like 'en-US' to override it.
                                            { minimumFractionDigits: 0 }
                                        );
                                        return format(sum);
                                    }
                                }, {
                                    column: "QC",
                                    summaryType: "sum",
                                    alignment: "right",
                                    valueFormat: "#,##0",
                                    displayFormat: "#,##0",
                                    customizeText: function (data) {
                                        //console.log(sumQtyMove.join(''));
                                        //var sum = sumDigits(sumQtyMove.join(''));
                                        var sum = sumQC.reduce((a, b) => parseFloat(a) + parseFloat(b), 0);
                                        var total = sum.toLocaleString(
                                            undefined, // leave undefined to use the browser's locale,
                                            // or use a string like 'en-US' to override it.
                                            { minimumFractionDigits: 0 }
                                        );
                                        return format(sum);
                                    }
                                }, {
                                    column: "Total",
                                    summaryType: "sum",
                                    alignment: "right",
                                    valueFormat: "#,##0",
                                    displayFormat: "#,##0",
                                    customizeText: function (data) {
                                        //console.log(sumQtyMove.join(''));
                                        //var sum = sumDigits(sumQtyMove.join(''));
                                        var sum = sumTotal.reduce((a, b) => parseFloat(a) + parseFloat(b), 0);
                                        var total = sum.toLocaleString(
                                            undefined, // leave undefined to use the browser's locale,
                                            // or use a string like 'en-US' to override it.
                                            { minimumFractionDigits: 0 }
                                        );
                                        return format(sum);
                                    }
                                }]
                        }
                    });
                    $("#gridContainer").dxDataGrid("instance").refresh();

                },
                error: function (ob, errStr) {
                    DevExpress.ui.notify(errStr, "This MachineCode OR Rang TransDate is not available in the database", 2000);
                }
            });
        }

    }
    </script>

    <script>
         function PrintPreview(data) {
        var grid = $('#gridContainer').dxDataGrid('instance');
        var keys = grid.getSelectedRowKeys();
        var text = "";
        var s;
        var comma = 0;
        var checkslectDN = false;
        if (keys.length > 0) {
            for (s in keys) {
                comma = parseInt(s) + 1;
                if (comma == keys.length) {
                    text += keys[s].RowNumber;
                }
                else {
                    text += keys[s].RowNumber + ",";
                }
            }
            
            $.ajax({
                type: 'POST',
                url: "api/GridWIPStatus/Print",
                data: { "RowNumber": text},
                //contentType: "application/json; charset=utf-8",
                //dataType: "html",
                //async: false,
                //dataType: 'json',
                success: function (e) {
                    //alert("xxx");
                    //$(element).closest("form").submit();
                    window.open('@Url.Action("Index", "PrintWIPStatus")', '_blank').focus();

                }
            });
          

        } else {
            var errorcustomDialog = DevExpress.ui.dialog.custom({
                title: 'print WIPStatus incorrect ! ',
                message: 'Please Select Row Data.',
                toolbarItems: [
                    { text: "Close", onClick: function () { return "Ok" } },
                    //{ text: "Not Ok", onClick: function () { return "Not Ok" } }
                ],
                width: "500px"

            });
            errorcustomDialog.show().done(function (dialogResult) {
                //focus something
            });
        }
             @*window.open('@Url.Action("Index", "PrintProduction1")', '_blank').focus();*@

    }
    </script>
    @*@Html.ActionLink("cccc", "PrintProductionDailyReport1", "ProductionDailyReport1_Print", null, new { target = "_blank" })*@
</form>