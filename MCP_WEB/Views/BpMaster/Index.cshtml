
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


@(Html.DevExtreme().DataGrid<MCP_WEB.Models.m_BPMaster>()
                        .ID("dgMain")
                        .Selection(s => s.Mode(SelectionMode.Multiple)
                                   .SelectAllMode( SelectAllMode.Page))
                        .ShowBorders(true)
                        .DataSource(ds => ds.Mvc()
                        .Controller("m_BPMaster")
                        .LoadAction("Get")
                        .InsertAction("Post")
                        .UpdateAction("Put")
                        .DeleteAction("Delete")
                        .Key("BPCode"))
                   .RemoteOperations(true)
                   .ShowColumnLines(true)
                   .ShowRowLines(true)
                   .RowAlternationEnabled(true)
                   .ShowBorders(true)
                   .HeaderFilter(h => h.Visible(true))
                   .FilterRow(f => f.Visible(true))
                   .SearchPanel(p => p.Visible(true))
                   .Pager(p => p
                   .AllowedPageSizes(new int[] { 10, 25, 50, 100 })
                   .ShowInfo(true)
                   .ShowNavigationButtons(true)
                   .ShowPageSizeSelector(true)
                   .Visible(true))
                   .Paging(p => p.PageSize(10))
                   .ColumnChooser(c => c
                     .Enabled(true)
                     .Mode(GridColumnChooserMode.DragAndDrop))
                   .AllowColumnResizing(true)
                   .ColumnMinWidth(50)
                   .ColumnAutoWidth(true)
                   .ColumnHidingEnabled(true)
                   .Export(e => e.Enabled(true).FileName("BP - " + DateTime.Now).AllowExportSelectedData(true))
                    .Columns(columns =>
                    {

                        columns.AddFor(m => m.BPCode)
                            .Caption("BP Code")
                            .DataType(GridColumnDataType.String)
                            .Alignment(HorizontalAlignment.Left)
                            .SortOrder(SortOrder.Asc);

                        columns.AddFor(m => m.BPName)
                            .Caption("Business Partner Name")
                            .DataType(GridColumnDataType.String)
                            .Alignment(HorizontalAlignment.Left);

                        columns.AddFor(m => m.BPType)
                            .Caption("BP Type")
                            .DataType(GridColumnDataType.String)
                            .Alignment(HorizontalAlignment.Left)
                            .Lookup(lookup => lookup
                                .DataSource(d => d.Mvc().Controller("m_BPMaster").LoadAction("GetBPTypeLookUp").Key("TypeId"))
                                .DisplayExpr("TypeName")
                                .ValueExpr("TypeId")
                            );
                        ;

                        columns.AddFor(m => m.PackingID)
                            .Caption("Package ID")
                            .DataType(GridColumnDataType.String)
                            .Width(100)
                            .Alignment(HorizontalAlignment.Left)
                               .Lookup(lookup => lookup
                                .DataSource(d => d.Mvc().Controller("m_BPMaster").LoadAction("GetPackingIdLookUp").Key("PackageTypeTd"))
                                .DisplayExpr("PackageDisp")
                                .ValueExpr("PackageTypeTd")
                            );
                        ;

                        columns.AddFor(m => m.BPAddress1)
                            .Caption("Address1")
                            .DataType(GridColumnDataType.String)
                            .Alignment(HorizontalAlignment.Left);

                        columns.AddFor(m => m.BPAddress2)
                            .Caption("Address2")
                            .DataType(GridColumnDataType.String)
                            .Alignment(HorizontalAlignment.Left);

                        columns.AddFor(m => m.BPAddress3)
                            .Caption("Address3")
                            .DataType(GridColumnDataType.String)
                            .Alignment(HorizontalAlignment.Left)
                            .Visible(false);

                        columns.AddFor(m => m.BPAddress4)
                            .Caption("Address4")
                            .DataType(GridColumnDataType.String)
                            .Alignment(HorizontalAlignment.Left)
                            .Visible(false);

                        columns.AddFor(m => m.BPAddress5)
                            .Caption("Address5")
                            .DataType(GridColumnDataType.String)
                            .Alignment(HorizontalAlignment.Left)
                            .Visible(false);

                        columns.AddFor(m => m.BPAddress6)
                            .Caption("Address6")
                            .DataType(GridColumnDataType.String)
                            .Alignment(HorizontalAlignment.Left)
                            .Visible(false);

                        columns.AddFor(m => m.TagFormat)
                            .Caption("TargetFormat")
                            .DataType(GridColumnDataType.String)
                            .Alignment(HorizontalAlignment.Left)
                            .Visible(false)
                                .Lookup(lookup => lookup
                                .DataSource(d => d.Mvc().Controller("m_BPMaster").LoadAction("GetTagFormatLookUp").Key("PackageTypeTd"))
                                .DisplayExpr("PackageDisp")
                                .ValueExpr("PackageTypeTd")
                            );
                        ;

                        columns.AddFor(m => m.CreateDate)
                            .Caption("CreateDate")
                            .DataType(GridColumnDataType.DateTime)
                            .Alignment(HorizontalAlignment.Left)
                            .AllowEditing(false)
                            .Visible(false)
                            .Format(ViewBag.GlobalDtFormat)
                        ;

                        columns.AddFor(m => m.TransDate)
                            .Caption("TransDate")
                            .DataType(GridColumnDataType.DateTime)
                            .Alignment(HorizontalAlignment.Left)
                            .AllowEditing(false)
                            .Visible(false)
                            .Format(ViewBag.GlobalDtFormat)
                        ;

                        columns.AddFor(m => m.ModifyBy)
                            .Caption("ModifyBy")
                            .DataType(GridColumnDataType.String)
                            .Alignment(HorizontalAlignment.Left)
                            .AllowEditing(false)
                            .Visible(false);


                    })
                    .Editing(e => e
                        .Mode(GridEditMode.Popup)
                        .AllowAdding(true)
                        .AllowUpdating(true)
                        .AllowDeleting(true)
                        .UseIcons(true)
                        .Popup(p => p
                        .Title("BP Info")
                        .ShowTitle(true)
                        .MaxWidth(800)
                        .MaxHeight(500)
                        .Position(pos => pos
                        .My(HorizontalAlignment.Center, VerticalAlignment.Center)
                        .At(HorizontalAlignment.Center, VerticalAlignment.Center)
                        .Of(new JS("window"))
                                )
                            )
                    )

                    .OnContentReady(@<text>
                        function(e)
                        {
                        moveEditColumnToLeft(e.component);
                        }
                    </text>)

                    .OnEditingStart(@<text> function(e) {
                        e.component.columnOption("BPCode", "allowEditing", false);
                        e.component.columnOption("CreateDate", "allowEditing", false);
                        e.component.columnOption("ModifyBy", "allowEditing", false);
                        } </text>)

                    .OnInitNewRow(@<text>function(e) {
                        e.component.columnOption("BPCode", "allowEditing", true);
                        InitNewRow(e)
                        }</text>)

                    @*.OnEditorPreparing(@<text> function(e) {
                        if (e.dataField == 'ModifyBy') {
                            e.editorOptions.disabled = true;
                            }
                        if (e.dataField == 'CreateDate') {
                            e.editorOptions.disabled = true;
                            }
                        if (e.dataField == 'TransDate') {
                            e.editorOptions.disabled = true;
                            }
                        }</text>)*@
)

<script>
      
    function moveEditColumnToLeft(dataGrid) {
        dataGrid.columnOption("command:edit", {
            visibleIndex: -1
        });
    }

    $(function () {
        $("#buttonContainer").dxButton({
            text: "bulk load",
            onClick: function () {
                var grid = $("#dgMain").dxDataGrid("instance");
                var keys = grid.getSelectedRowKeys();
                var AllKeys = '';
                keys.forEach(function (entry) {
                    AllKeys = AllKeys + entry.ID + ',';
                });
                document.getElementById('textAreaSelectedKeys').value = AllKeys;
                document.forms[0].submit();
            }
        });
    });

    function InitNewRow(e) {
        e.data.TransDate = new Date();
        e.data.CreateDate = new Date();
        var u = "@(ViewBag.UserName)";
        e.data.ModifyBy = u ;
    }

</script>