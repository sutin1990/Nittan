<meta http-equiv='cache-control' content='no-cache'>
<meta http-equiv='expires' content='0'>
<meta http-equiv='pragma' content='no-cache'>
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    div.relative {
        position: relative;
        width: 100%;
        border: 1px solid lightgray;
        height: 100px;
    }

    div.absolute1 {
        position: absolute;
        left: 2%;
        width: 15%;
        /*height: 100px;*/
        /*border: 1px solid #73AD21;*/
    }

    div.absolute2 {
        position: absolute;
        top: 4.5%;
        left: 32%;
        width: 20%;
        /*border: 1px solid #73AD21;*/
    }

    div.absolute3 {
        position: absolute;
        top: 8%;
        left: 62%;
        /*right: 30px;*/
        /*height: 100px;*/
    }

    div.absolute4 {
        position: absolute;
        top: 60px;
        left: 2%;
        /*height: 100px;*/
    }

    div.absolute5 {
        position: absolute;
        /*top: 10px;*/
        left: 570px;
        width: 250px;
        /*height: 100px;*/
        /*border: 1px solid #73AD21;*/
    }
</style>
<form>
    <br /><div class="relative">
        <div class="absolute1"><label style="padding-top:10px; width:100%;">Date From:</label><div id="startdateBox" style="width:100%; left:60%; bottom:30px;"></div></div>
        <div class="absolute2"><label style="padding-top:10px; width:100%;">Process:</label><div id="select_ProcessMaster" style="left:40%; bottom:30px;"></div></div>
        <div class="absolute4"><label>M/C Line:</label><div id="select_MachineMaste" style="left:51%; bottom:30px;"></div></div>
        <div class="absolute3">
            @(Html.DevExtreme().Button()
                                    .ID("btnOK")
                                    .Text("Ok")
                                    .Type(ButtonType.Success)
                                    .OnClick("filter")
            )
        </div>
    </div>

    <br />

    @(Html.DevExtreme().DataGrid<MCP_WEB.Models.SummaryWIP>()
                                    .ID("gridContainer")
                                    .ShowBorders(true)
                                    .Export(e => e.Enabled(true).FileName("SummaryWIP-" + DateTime.Now).AllowExportSelectedData(true))
                                    .ColumnChooser(c => c.Enabled(true))
                                    .AllowColumnResizing(true)
                                    .AllowColumnReordering(true)
                                    //.RemoteOperations(true)
                                    .ShowRowLines(true)
                                    //.ColumnHidingEnabled(true)
                                    .ColumnAutoWidth(true)
                                    .ColumnMinWidth(100)
                                    .Selection(s => s.Mode(SelectionMode.Multiple)
                                        .ShowCheckBoxesMode(GridSelectionShowCheckBoxesMode.Always)
                                        .SelectAllMode(SelectAllMode.Page)
                                        )

                                    .HoverStateEnabled(true)
                                    .RowAlternationEnabled(true)
                                    .Paging(paging => paging.PageSize(10))
                                    .Pager(p => p
                                        .AllowedPageSizes(new int[] { 10, 25, 50, 100 })
                                        .ShowInfo(true)
                                        .ShowNavigationButtons(true)
                                        .ShowPageSizeSelector(true)
                                        .Visible(true))

                                    //.DataSource(d => d.Mvc().Controller("ProductionDailyReport1").LoadAction("Get"))

                                    //.FilterPanel(f => f.Visible(true))
                                    .HeaderFilter(h => h.Visible(true))
                                    .FilterRow(filterRow => filterRow
                                            .Visible(true)
                                            .ApplyFilter(GridApplyFilterMode.Auto))
                                    .SearchPanel(searchPanel => searchPanel
                                        .Visible(true)
                                        .Width(240)
                                        .Placeholder("Search..."))

                                    .Columns(columns =>
                                    {
                                        columns.Add().DataField("Asof").Caption("Asof").Visible(false).ShowInColumnChooser(true).DataType(GridColumnDataType.DateTime).Format(ViewBag.GlobalDtFormat);
                                        columns.Add().DataField("FCode").Caption("F-Code");
                                        columns.Add().DataField("Model").Caption("Model");
                                        columns.Add().DataField("CUTOFFBAR").Caption("CUTOFFBAR").Format("#,##0");
                                        columns.Add().DataField("FRICTION").Caption("FRICTION").Format("#,##0");
                                        columns.Add().DataField("FORGING").Caption("FORGING").Format("#,##0");
                                        columns.Add().DataField("STELLITE_TIP").Caption("STELLITETIP").Format("#,##0");
                                        columns.Add().DataField("STELLITE_SEAT").Caption("STELLITESEAT").Format("#,##0");
                                        columns.Add().DataField("STRAIGHTENING").Caption("STRAIGHTENING").Format("#,##0");
                                        columns.Add().DataField("STEM_ROUGH").Caption("STEMROUGH").Format("#,##0");
                                        columns.Add().DataField("STEM_FINISH").Caption("STEMFINISH").Format("#,##0");
                                        columns.Add().DataField("SEATFINISHBEFORE").Caption("SEATFINISH BEFORE").Format("#,##0");
                                        columns.Add().DataField("ISONITE").Caption("ISONITE").Format("#,##0");
                                        columns.Add().DataField("SEAT_FINISH").Caption("SEATFINISH").Format("#,##0");
                                        columns.Add().DataField("QC").Caption("QC").Format("#,##0");
                                        columns.Add().DataField("Total").Caption("Total").Format("#,##0");

                                    }) // end .Columns



    )
    <br />

    @(Html.DevExtreme().Button()
                            .ID("btnPrintPreviewT1")
                            .Text("Print")
                            .Type(ButtonType.Default)
                            //.UseSubmitBehavior(true)
                            .OnClick("PrintPreview")
    )

    <script>
        const format = num => {
            const n = String(num),
                p = n.indexOf('.')
            return n.replace(
                /\d(?=(?:\d{3})+(?:\.|$))/g,
                (m, i) => p < 0 || i < p ? `${m},` : m
            )
        }

        var sumCUTOFFBAR = [];
        var sumFRICTION = [];
        var sumFORGING = [];
        var sumSTELLITE_TIP = [];
        var sumSTELLITE_SEAT = [];
        var sumSTRAIGHTENING = [];
        var sumSTEM_ROUGH = [];
        var sumSTEM_FINISH = [];
        var sumSEATFINISHBEFORE = [];
        var sumISONITE = [];
        var sumSEAT_FINISH = [];
        var sumQC = [];
        var sumTotal = [];
    var source_m_Processmaster = DevExpress.data.AspNet.createStore({
                //"key": "ID",
                "loadUrl": "@Url.Action("Get_m_Processmaster", "GridSummaryWIP", new { httproute = true })",
    });
    var display = "";
    var Process = "";
    $("#select_ProcessMaster").dxSelectBox({
        dataSource: source_m_Processmaster,
        displayExpr: function (e) {
            if (e) {
                display = e.ProcessName;
            }
            return display;
        },
        //displayExpr: "DepDesc",
        valueExpr: 'ProcessCode',
        searchEnabled: true,
        searchExpr: ["ProcessCode", "ProcessName"],

        itemTemplate: function (itemData) {
            return $("<div />").append(
                $("<p />").text(itemData.ProcessName)
                    .css("display", "inline-block")
            );
        },
        onValueChanged: function (e) {
            Process = e.value;
        },
    });

    var source_m_MachineMaster = DevExpress.data.AspNet.createStore({
                //"key": "ID",
                "loadUrl": "@Url.Action("Get_m_MachineMaster", "GridSummaryWIP", new { httproute = true })",
    });
    var display = "";
    var machinemaste = null;
    $("#select_MachineMaste").dxSelectBox({
        dataSource: source_m_MachineMaster,
        displayExpr: function (e) {
            if (e) {
                display = e.MachineCode + " - " + e.MachineName;
            }
            return display;
        },
        //displayExpr: "DepDesc",
        valueExpr: 'MachineCode',
        searchEnabled: true,
        searchExpr: ["MachineCode", "MachineName"],

        itemTemplate: function (itemData) {
            return $("<div />").append(
                $("<p />").text(itemData.MachineCode + " - " + itemData.MachineName)
                    .css("display", "inline-block")
            );
        },
        onValueChanged: function (e) {
            machinemaste = e.value;
        },
    });
        
        var startdateBox = new Date();
        var month = startdateBox.getMonth() + 1;
        var day = startdateBox.getDate();
        if (month < 10) { month = "0" + month; }
        if (day < 10) { day = "0" + day; }
        startdateBox = startdateBox.getFullYear() + "-" + month + "-" + day;
    //var enddateBox = new Date();
    //enddateBox = enddateBox.getFullYear() + "-" + (enddateBox.getMonth() + 1) + "-" + enddateBox.getDate();

    $("#startdateBox").dxDateBox({
        min: new Date(2000, 0, 1),
        max: new Date(2029, 11, 31),
        value: new Date(),
        displayFormat: "dd/MM/yyyy",
        formatString: 'shortdate',
        onValueChanged: function (e) {
            //var ed = $("#enddateBox").dxDateBox('instance').option('value');
            //if (e.value.getTime() >= ed.getTime()) {
            //    $("#enddateBox").dxDateBox("instance").option("isValid", true);//clear validate dateBox
            //}
            startdateBox = e.value;
             month = startdateBox.getMonth() + 1;
             day = startdateBox.getDate();
            if (month < 10) { month = "0" + month;}
            if (day < 10) { day = "0" + day;}
            startdateBox = startdateBox.getFullYear() + "-" + month + "-" + day;

        },

    }).dxValidator({
        validationRules: [{
            type: "required",
            message: "From Date is required."
        },
        //{
        //    type: "custom",
        //    message: "please select again From Date Must not be over To Date.",
        //    validationCallback: function (e) {
        //        var ed = $("#enddateBox").dxDateBox('instance').option('value');
        //        var sd = e.value;
        //        return sd && ed && sd.getTime() <= ed.getTime();
        //    }
        //}
        ]
    });




    function filter() {
        //var check_enddate = $("#enddateBox").dxDateBox("instance").option('isValid');
        var check_startdate = $("#startdateBox").dxDateBox("instance").option('isValid');

        if (check_startdate == true) {

            //console.log("start:", startdateBox);
            //console.log("end:", enddateBox);
            $.ajax({
                type: 'POST',
                url: "api/GridSummaryWIP/Filter",
                data: { "fromdate": startdateBox, "Process": Process, "machinemaste": machinemaste },
                async: false,
                dataType: 'json',
                success: function (result) {
                    //console.log(result);
                    $.each(result, function (item, value) {

                        source = value;
                    });

                    $("#gridContainer").dxDataGrid({
                        dataSource: result,
                        columns: [
                            {
                                dataField: "FCode",                                
                                showInColumnChooser: true
                            }, 
                            
                            {
                                dataField: "Model",                                
                                showInColumnChooser: true
                            },
                                                       
                            {
                                dataField: "CUTOFFBAR",
                                caption: "CUTOFFBAR",
                                showInColumnChooser: true
                            },
                            {
                                dataField: "FRICTION",
                                caption: "FRICTION",
                                showInColumnChooser: true
                            },
                            {
                                dataField: "FORGING",
                                caption: "FORGING",
                                showInColumnChooser: true
                            },
                            {
                                dataField: "STELLITE_TIP",
                                caption: "STELLITE TIP",
                                showInColumnChooser: true
                            },
                            {
                                dataField: "STELLITE_SEAT",
                                caption: "STELLITE SEAT",
                                showInColumnChooser: true
                            },
                            {
                                dataField: "STRAIGHTENING",
                                caption: "STRAIGHTENING",
                                showInColumnChooser: true
                            },
                            {
                                dataField: "STEM_ROUGH",
                                caption: "STEM ROUGH",
                                showInColumnChooser: true
                            },
                            {
                                dataField: "STEM_FINISH",
                                caption: "STEM FINISH",
                                showInColumnChooser: true
                            },
                            {
                                dataField: "SEATFINISHBEFORE",
                                caption: "SEATFINISH BEFORE",
                                showInColumnChooser: true
                            },
                            {
                                dataField: "ISONITE",
                                caption: "ISONITE",
                                showInColumnChooser: true
                            },
                            {
                                dataField: "SEAT_FINISH",
                                caption: "SEAT FINISH",
                                showInColumnChooser: true
                            },
                            {
                                dataField: "QC",
                                caption: "QC",
                                showInColumnChooser: true
                            },
                            {
                                dataField: "Asof",
                                caption: "Date",
                                dataType: "date",
                                format: "@ViewBag.GlobalDtFormat",
                                showInColumnChooser: true,
                                visible:false,

                            },
                                                       
                        ],
                        onCellPrepared: function (e) {
                            if (e.rowType === "data" && e.column.dataField === "CUTOFFBAR" && e.rowIndex != undefined) {
                                sumCUTOFFBAR.push(e.data.CUTOFFBAR);                               
                            }
                            if (e.rowType === "data" && e.column.dataField === "FRICTION" && e.rowIndex != undefined) {
                                sumFRICTION.push(e.data.FRICTION);
                            }
                            if (e.rowType === "data" && e.column.dataField === "FORGING" && e.rowIndex != undefined) {
                                sumFORGING.push(e.data.FORGING);
                            }

                            if (e.rowType === "data" && e.column.dataField === "STELLITE_TIP" && e.rowIndex != undefined) {
                                sumSTELLITE_TIP.push(e.data.STELLITE_TIP);
                            }

                            if (e.rowType === "data" && e.column.dataField === "STELLITE_SEAT" && e.rowIndex != undefined) {
                                sumSTELLITE_SEAT.push(e.data.STELLITE_SEAT);
                            }

                            if (e.rowType === "data" && e.column.dataField === "STRAIGHTENING" && e.rowIndex != undefined) {
                                sumSTRAIGHTENING.push(e.data.STRAIGHTENING);
                            }

                            if (e.rowType === "data" && e.column.dataField === "STEM_ROUGH" && e.rowIndex != undefined) {
                                sumSTEM_ROUGH.push(e.data.STEM_ROUGH);
                            }

                            if (e.rowType === "data" && e.column.dataField === "STEM_FINISH" && e.rowIndex != undefined) {
                                sumSTEM_FINISH.push(e.data.STEM_FINISH);
                            }

                            if (e.rowType === "data" && e.column.dataField === "SEATFINISHBEFORE" && e.rowIndex != undefined) {
                                sumSEATFINISHBEFORE.push(e.data.SEATFINISHBEFORE);
                            }

                            if (e.rowType === "data" && e.column.dataField === "ISONITE" && e.rowIndex != undefined) {
                                sumISONITE.push(e.data.ISONITE);
                            }

                            if (e.rowType === "data" && e.column.dataField === "SEAT_FINISH" && e.rowIndex != undefined) {
                                sumSEAT_FINISH.push(e.data.SEAT_FINISH);
                            }

                            if (e.rowType === "data" && e.column.dataField === "QC" && e.rowIndex != undefined) {
                                sumQC.push(e.data.QC);
                            }

                            if (e.rowType === "data" && e.column.dataField === "Total" && e.rowIndex != undefined) {
                                sumTotal.push(e.data.Total);
                            }                            
                        },
                        onContentReady: function (e) {
                            var gridItems = $("#gridContainer").dxDataGrid('instance');

                            var total1 = sumCUTOFFBAR.reduce((a, b) => parseFloat(a) + parseFloat(b), 0);
                            var total2 = sumFRICTION.reduce((a, b) => parseFloat(a) + parseFloat(b), 0);
                            var total3 = sumFORGING.reduce((a, b) => parseFloat(a) + parseFloat(b), 0);
                            var total4 = sumSTELLITE_TIP.reduce((a, b) => parseFloat(a) + parseFloat(b), 0);
                            var total5 = sumSTELLITE_SEAT.reduce((a, b) => parseFloat(a) + parseFloat(b), 0);
                            var total6 = sumSTRAIGHTENING.reduce((a, b) => parseFloat(a) + parseFloat(b), 0);
                            var total7 = sumSTEM_ROUGH.reduce((a, b) => parseFloat(a) + parseFloat(b), 0);
                            var total8 = sumSTEM_FINISH.reduce((a, b) => parseFloat(a) + parseFloat(b), 0);
                            var total13 = sumSEATFINISHBEFORE.reduce((a, b) => parseFloat(a) + parseFloat(b), 0);
                            var total9 = sumISONITE.reduce((a, b) => parseFloat(a) + parseFloat(b), 0);
                            var total10 = sumSEAT_FINISH.reduce((a, b) => parseFloat(a) + parseFloat(b), 0);
                            var total11 = sumQC.reduce((a, b) => parseFloat(a) + parseFloat(b), 0);
                            var total12 = sumTotal.reduce((a, b) => parseFloat(a) + parseFloat(b), 0);
                            

                            var summaryCells = e.component.getController('data').footerItems()[0].summaryCells;
                            $.each(summaryCells, function (item, value) {
                                if (value.length > 0) {
                                    //console.log(item + "=>" + value[0].name);
                                    var name = value[0].name;
                                    if (name == "CUTOFFBAR") {
                                        gridItems.getController('data').footerItems()[0].summaryCells[item][0].value = total1;
                                    }
                                    if (name == "FRICTION") {
                                        gridItems.getController('data').footerItems()[0].summaryCells[item][0].value = total2;
                                    }
                                    if (name == "FORGING") {
                                        gridItems.getController('data').footerItems()[0].summaryCells[item][0].value = total3;
                                    }
                                    if (name == "STELLITE_TIP") {
                                        gridItems.getController('data').footerItems()[0].summaryCells[item][0].value = total4;
                                    }
                                    if (name == "STELLITE_SEAT") {
                                        gridItems.getController('data').footerItems()[0].summaryCells[item][0].value = total5;
                                    }
                                    if (name == "STRAIGHTENING") {
                                        gridItems.getController('data').footerItems()[0].summaryCells[item][0].value = total6;
                                    }
                                    if (name == "STEM_ROUGH") {
                                        gridItems.getController('data').footerItems()[0].summaryCells[item][0].value = total7;
                                    }
                                    if (name == "STEM_FINISH") {
                                        gridItems.getController('data').footerItems()[0].summaryCells[item][0].value = total8;
                                    }
                                    if (name == "SEATFINISHBEFORE") {
                                        gridItems.getController('data').footerItems()[0].summaryCells[item][0].value = total13;
                                    }
                                    if (name == "ISONITE") {
                                        gridItems.getController('data').footerItems()[0].summaryCells[item][0].value = total9;
                                    }
                                    if (name == "SEAT_FINISH") {
                                        gridItems.getController('data').footerItems()[0].summaryCells[item][0].value = total10;
                                    }
                                    if (name == "QC") {
                                        gridItems.getController('data').footerItems()[0].summaryCells[item][0].value = total11;
                                    }
                                    if (name == "QtyMove") {
                                        gridItems.getController('data').footerItems()[0].summaryCells[item][0].value = total12;
                                    }
                                    gridItems.getView('footerView').render();
                                }
                            });

                             sumCUTOFFBAR = [];
                             sumFRICTION = [];
                             sumFORGING = [];
                             sumSTELLITE_TIP = [];
                             sumSTELLITE_SEAT = [];
                             sumSTRAIGHTENING = [];
                             sumSTEM_ROUGH = [];
                             sumSTEM_FINISH = [];
                             sumSEATFINISHBEFORE = [];
                             sumISONITE = [];
                             sumSEAT_FINISH = [];
                             sumQC = [];
                             sumTotal = [];
                            NotSelection(gridItems);
                        },
                        summary: {
                            calculateCustomSummary: function (options) {
                                if (options.name == "CUTOFFBAR") {
                                    if (options.summaryProcess == "start") {
                                        options.totalValue = 0;
                                    }
                                    if (options.summaryProcess == "calculate") {
                                        if (options.value) {
                                            options.totalValue += options.value["CUTOFFBAR"];
                                        }
                                    }
                                }

                                if (options.name == "FRICTION") {
                                    if (options.summaryProcess == "start") {
                                        options.totalValue = 0;
                                    }
                                    if (options.summaryProcess == "calculate") {
                                        if (options.value) {
                                            options.totalValue += options.value["FRICTION"];
                                        }
                                    }
                                }
                                if (options.name == "FORGING") {
                                    if (options.summaryProcess == "start") {
                                        options.totalValue = 0;
                                    }
                                    if (options.summaryProcess == "calculate") {
                                        if (options.value) {
                                            options.totalValue += options.value["FORGING"];
                                        }
                                    }
                                }
                                if (options.name == "STELLITE_TIP") {
                                    if (options.summaryProcess == "start") {
                                        options.totalValue = 0;
                                    }
                                    if (options.summaryProcess == "calculate") {
                                        if (options.value) {
                                            options.totalValue += options.value["STELLITE_TIP"];
                                        }
                                    }
                                }
                                if (options.name == "STELLITE_SEAT") {
                                    if (options.summaryProcess == "start") {
                                        options.totalValue = 0;
                                    }
                                    if (options.summaryProcess == "calculate") {
                                        if (options.value) {
                                            options.totalValue += options.value["STELLITE_SEAT"];
                                        }
                                    }
                                }
                                if (options.name == "STRAIGHTENING") {
                                    if (options.summaryProcess == "start") {
                                        options.totalValue = 0;
                                    }
                                    if (options.summaryProcess == "calculate") {
                                        if (options.value) {
                                            options.totalValue += options.value["STRAIGHTENING"];
                                        }
                                    }
                                }
                                if (options.name == "STEM_ROUGH") {
                                    if (options.summaryProcess == "start") {
                                        options.totalValue = 0;
                                    }
                                    if (options.summaryProcess == "calculate") {
                                        if (options.value) {
                                            options.totalValue += options.value["STEM_ROUGH"];
                                        }
                                    }
                                }
                                if (options.name == "STEM_FINISH") {
                                    if (options.summaryProcess == "start") {
                                        options.totalValue = 0;
                                    }
                                    if (options.summaryProcess == "calculate") {
                                        if (options.value) {
                                            options.totalValue += options.value["STEM_FINISH"];
                                        }
                                    }
                                }
                                if (options.name == "SEATFINISHBEFORE") {
                                    if (options.summaryProcess == "start") {
                                        options.totalValue = 0;
                                    }
                                    if (options.summaryProcess == "calculate") {
                                        if (options.value) {
                                            options.totalValue += options.value["SEATFINISHBEFORE"];
                                        }
                                    }
                                }
                                if (options.name == "ISONITE") {
                                    if (options.summaryProcess == "start") {
                                        options.totalValue = 0;
                                    }
                                    if (options.summaryProcess == "calculate") {
                                        if (options.value) {
                                            options.totalValue += options.value["ISONITE"];
                                        }
                                    }
                                }
                                if (options.name == "SEAT_FINISH") {
                                    if (options.summaryProcess == "start") {
                                        options.totalValue = 0;
                                    }
                                    if (options.summaryProcess == "calculate") {
                                        if (options.value) {
                                            options.totalValue += options.value["SEAT_FINISH"];
                                        }
                                    }
                                }
                                if (options.name == "QC") {
                                    if (options.summaryProcess == "start") {
                                        options.totalValue = 0;
                                    }
                                    if (options.summaryProcess == "calculate") {
                                        if (options.value) {
                                            options.totalValue += options.value["QC"];
                                        }
                                    }
                                }
                                if (options.name == "QtyMove") {
                                    if (options.summaryProcess == "start") {
                                        options.totalValue = 0;
                                    }
                                    if (options.summaryProcess == "calculate") {
                                        if (options.value) {
                                            options.totalValue += options.value["QtyMove"];
                                        }
                                    }
                                }
                            },
                            totalItems: [{
                                column: "Model",
                                alignment: "right",
                                customizeText: function (data) {
                                    return "Total:";
                                }
                            }, {
                                    showInColumn: "CUTOFFBAR",
                                    summaryType: "custom",
                                    alignment: "right",
                                    valueFormat: "#,##0",
                                    name: "CUTOFFBAR",
                                }, {
                                    showInColumn: "FRICTION",
                                    summaryType: "custom",
                                    alignment: "right",
                                    valueFormat: "#,##0",
                                    name: "FRICTION",
                                }, {
                                    showInColumn: "FORGING",
                                    summaryType: "custom",
                                    alignment: "right",
                                    valueFormat: "#,##0",
                                    name: "FORGING",
                                }, {
                                    showInColumn: "STELLITE_TIP",
                                    summaryType: "custom",
                                    alignment: "right",
                                    valueFormat: "#,##0",
                                    name: "STELLITE_TIP",
                                }, {
                                    showInColumn: "STELLITE_SEAT",
                                    summaryType: "custom",
                                    alignment: "right",
                                    valueFormat: "#,##0",
                                    name: "STELLITE_SEAT",
                                }, {
                                    showInColumn: "STRAIGHTENING",
                                    summaryType: "custom",
                                    alignment: "right",
                                    valueFormat: "#,##0",
                                    name: "STRAIGHTENING",
                                }, {
                                    showInColumn: "STEM_ROUGH",
                                    summaryType: "custom",
                                    alignment: "right",
                                    valueFormat: "#,##0",
                                    name: "STEM_ROUGH",
                                }, {
                                    showInColumn: "STEM_FINISH",
                                    summaryType: "custom",
                                    alignment: "right",
                                    valueFormat: "#,##0",
                                    name: "STEM_FINISH",
                                }, {
                                    showInColumn: "SEATFINISHBEFORE",
                                    summaryType: "custom",
                                    alignment: "right",
                                    valueFormat: "#,##0",
                                    name: "SEATFINISHBEFORE",
                                },{
                                    showInColumn: "ISONITE",
                                    summaryType: "custom",
                                    alignment: "right",
                                    valueFormat: "#,##0",
                                    name: "ISONITE",
                                }, {
                                    showInColumn: "SEAT_FINISH",
                                    summaryType: "custom",
                                    alignment: "right",
                                    valueFormat: "#,##0",
                                    name: "SEAT_FINISH",
                                }, {
                                    showInColumn: "QC",
                                    summaryType: "custom",
                                    alignment: "right",
                                    valueFormat: "#,##0",
                                    name: "QC",
                                }, {
                                    showInColumn: "QtyMove",
                                    summaryType: "custom",
                                    alignment: "right",
                                    valueFormat: "#,##0",
                                    name: "QtyMove",
                                }]
                        }
                    });
                    $("#gridContainer").dxDataGrid("instance").refresh();

                },
                error: function (ob, errStr) {
                    DevExpress.ui.notify(errStr, "This MachineCode OR Rang TransDate is not available in the database", 2000);
                }
            });
        }

    }
    </script>

    <script>
        function PrintPreview(data) {
        var grid = $('#gridContainer').dxDataGrid('instance');
        var keys = grid.getSelectedRowKeys();
        var text = "";
        var s;
        var comma = 0;
        var checkslectDN = false;
        if (keys.length > 0) {
            for (s in keys) {
                comma = parseInt(s) + 1;
                if (comma == keys.length) {
                    text += keys[s].RowNumber;
                }
                else {
                    text += keys[s].RowNumber + ",";
                }
            }
            if (Process == null) {
                Process = "";
            }
            if (machinemaste == null) {
                machinemaste = "";
            }

            if (startdateBox == null) {
                startdateBox = "";
            }

            $.ajax({
                type: 'POST',
                url: "api/GridSummaryWIP/Print",
                data: { "RowNumber": text, "fromdate": startdateBox},
                //contentType: "application/json; charset=utf-8",
                //dataType: "html",
                //async: false,
                //dataType: 'json',
                success: function (e) {
                    //alert("xxx");
                    //$(element).closest("form").submit();
                    window.open('@Url.Action("Index", "PrintSummaryWIP")?process=' + Process + '&machinemaste=' + machinemaste +'&fromdate=' + startdateBox, '_blank').focus();

                }
            });
          

        } else {
            var errorcustomDialog = DevExpress.ui.dialog.custom({
                title: 'print SummaryWIP incorrect ! ',
                message: 'Please Select Row Data.',
                toolbarItems: [
                    { text: "Close", onClick: function () { return "Ok" } },
                    //{ text: "Not Ok", onClick: function () { return "Not Ok" } }
                ],
                width: "500px"

            });
            errorcustomDialog.show().done(function (dialogResult) {
                //focus something
            });
        }
             @*window.open('@Url.Action("Index", "PrintProduction1")', '_blank').focus();*@

    }
    </script>
    @*@Html.ActionLink("cccc", "PrintProductionDailyReport1", "ProductionDailyReport1_Print", null, new { target = "_blank" })*@
</form>