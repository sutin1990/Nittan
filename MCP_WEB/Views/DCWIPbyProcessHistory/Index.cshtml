<style>
    div.relative {
        position: relative;
        width: 100%;
        border: 1px solid lightgray;
        height: 120px;
    }

    div.absolute1 {
        position: absolute;
        top: 4.5%;
        left: 2%;
        width: 15%;
        /*height: 100px;*/
        /*border: 1px solid #73AD21;*/
    }

    div.absolute2 {
        position: absolute;
        top: 4.5%;
        left: 30%;
        width: 20%;
        /*height: 100px;*/
        /*border: 1px solid #73AD21;*/
    }

    div.absolute3 {
        position: absolute;
        top: 8%;
        left: 53%;
    }

    div.absolute4 {
        position: absolute;
        top: 70px;
        left: 2%;
        /*height: 100px;*/
    }

    div.absolute5 {
        position: absolute;
        /*top: 10px;*/
        left: 570px;
        width: 250px;
        /*height: 100px;*/
        /*border: 1px solid #73AD21;*/
    }

    div.absolute6 {
        position: absolute;
        top: 60px;
        left: 300px;
        /*height: 100px;*/
    }

    div.absolute7 {
        position: absolute;
        top: 60px;
        left: 580px;
        /*height: 100px;*/
    }
</style>
<form>
    <br /><div class="relative">
    <div class="absolute1"><label style="padding-top:10px">Date From:</label><div id="startdateBox" style="width:100%; left:55%; bottom:30px;"></div></div>
    <div class="absolute2"><label style="padding-top:10px">Date To:</label><div id="enddateBox" style="left:34%; bottom:30px;"></div></div>
    <div class="absolute4"><label style="padding-top:10px">Process:</label><div id="select_ProcessMaster" style="left:46%; bottom:30px;"></div></div>
   
    <div class="absolute3">
        @(Html.DevExtreme().Button()
                            .ID("btnOK")
                            .Text("Ok")
                            .Type(ButtonType.Success)
                            .OnClick("filter")
        )
    </div>
</div>
    <br />


    @(Html.DevExtreme().DataGrid<MCP_WEB.Models.DCWIPbyProcessH>()
                                    .ID("gridContainer")
                                    .ShowBorders(true)
                                    .Export(e => e.Enabled(true).FileName("DCWIPbyProcessH-" + DateTime.Now).AllowExportSelectedData(true))
                                    .ColumnChooser(c => c.Enabled(true))
                                    .AllowColumnResizing(true)
                                    .AllowColumnReordering(true)
                                    //.RemoteOperations(true)
                                    .ShowRowLines(true)
                                    //.ColumnHidingEnabled(true)
                                    .ColumnAutoWidth(true)
                                    .ColumnMinWidth(100)
                                    .Selection(s => s.Mode(SelectionMode.Multiple)
                                        .ShowCheckBoxesMode(GridSelectionShowCheckBoxesMode.Always)
                                        .SelectAllMode(SelectAllMode.Page)
                                        )

                                    .HoverStateEnabled(true)
                                    .RowAlternationEnabled(true)
                                    .Paging(paging => paging.PageSize(10))
                                    .Pager(p => p
                                        .AllowedPageSizes(new int[] { 10, 25, 50, 100 })
                                        .ShowInfo(true)
                                        .ShowNavigationButtons(true)
                                        .ShowPageSizeSelector(true)
                                        .Visible(true))

                                    //.DataSource(d => d.Mvc().Controller("GridWipMovement").LoadAction("Get_data"))

                                    //.FilterPanel(f => f.Visible(true))
                                    .HeaderFilter(h => h.Visible(true))
                                    .FilterRow(filterRow => filterRow
                                            .Visible(true)
                                            .ApplyFilter(GridApplyFilterMode.Auto))
                                    .SearchPanel(searchPanel => searchPanel
                                        .Visible(true)
                                        .Width(240)
                                        .Placeholder("Search..."))

                                    .Columns(columns =>
                                    {
                                        columns.Add().DataField("FCode").Caption("F-Code");
                                        columns.Add().DataField("Model").Caption("Model");
                                        columns.Add().DataField("Barcode").Caption("Lot No.");
                                        columns.Add().DataField("QtyOrder").Caption("Order QTY").Format("#,##0.00");
                                        columns.Add().DataField("WIP").Caption("WIP QTY").Format("#,##0.00");
                                        columns.Add().DataField("WIPRate").Caption("%WIP").Format("#,##0.00");
                                        columns.Add().DataField("NC").Caption("NC QTY").Format("#,##0.00");
                                        columns.Add().DataField("NCRate").Caption("%NC").Format("#,##0.00");
                                        columns.Add().DataField("NG").Caption("NG QTY").Format("#,##0.00");
                                        columns.Add().DataField("NGRate").Caption("%NG").Format("#,##0.00");

                                    }) // end .Columns

    )
    <br />

    @(Html.DevExtreme().Button()
                            .ID("btnPrintPreviewT1")
                            .Text("Print")
                            .Type(ButtonType.Default)
            //.UseSubmitBehavior(true)
            .OnClick("PrintPreview")
    )

</form>

<script> 

    var sumQtyOrder = [];
    var sumWIP = [];
    var sumNG = [];
    var sumNC = [];
    var sumWIPRate = [];
    var sumNGRate = [];
    var sumNCRate = [];

    var source_m_Processmaster = DevExpress.data.AspNet.createStore({
                //"key": "ID",
                "loadUrl": "@Url.Action("Get_m_Processmaster", "GridDCWIPbyProcessH", new { httproute = true })",
    });
    var display = "";
    var Process = "";
    $("#select_ProcessMaster").dxSelectBox({
        dataSource: source_m_Processmaster,
        displayExpr: function (e) {
            if (e) {
                display = e.ProcessName;
            }
            return display;
        },
        //displayExpr: "DepDesc",
        valueExpr: 'ProcessCode',
        searchEnabled: true,
        searchExpr: ["ProcessCode", "ProcessName"],

        itemTemplate: function (itemData) {
            return $("<div />").append(
                $("<p />").text(itemData.ProcessName)
                    .css("display", "inline-block")
            );
        },
        onValueChanged: function (e) {
            Process = e.value;
        },
    });    

    var startdateBox = new Date();
    startdateBox = startdateBox.getFullYear() + "-" + (startdateBox.getMonth() + 1) + "-" + startdateBox.getDate();
    var enddateBox = new Date();
    enddateBox = enddateBox.getFullYear() + "-" + (enddateBox.getMonth() + 1) + "-" + enddateBox.getDate();

    $("#startdateBox").dxDateBox({
        min: new Date(2000, 0, 1),
        max: new Date(2029, 11, 31),
        value: new Date(),
        displayFormat: "dd/MM/yyyy",
        formatString: 'shortdate',
        onValueChanged: function (e) {
            var ed = $("#enddateBox").dxDateBox('instance').option('value');
            if (e.value.getTime() >= ed.getTime()) {
                $("#enddateBox").dxDateBox("instance").option("isValid", true);//clear validate dateBox
            }
            startdateBox = e.value;
            startdateBox = startdateBox.getFullYear() + "-" + (startdateBox.getMonth() + 1) + "-" + startdateBox.getDate();

        },

    }).dxValidator({
        validationRules: [{
            type: "required",
            message: "From Date is required."
        },
        {
            type: "custom",
            message: "please select again From Date Must not be over To Date.",
            validationCallback: function (e) {
                var ed = $("#enddateBox").dxDateBox('instance').option('value');
                var sd = e.value;
                return sd && ed && sd.getTime() <= ed.getTime();
            }
        }
        ]
    });

    $("#enddateBox").dxDateBox({
        min: new Date(2000, 0, 1),
        max: new Date(2029, 11, 31),
        value: new Date(),
        displayFormat: "dd/MM/yyyy",
        formatString: 'dd MMM yyyy',
        onValueChanged: function (e) {
            var sd = $("#startdateBox").dxDateBox('instance').option('value');
            if (e.value.getTime() >= sd.getTime()) {
                $("#startdateBox").dxDateBox("instance").option("isValid", true);
            }
            enddateBox = e.value;
            enddateBox = enddateBox.getFullYear() + "-" + (enddateBox.getMonth() + 1) + "-" + enddateBox.getDate();

        }

    }).dxValidator({
        validationRules: [{
            type: "required",
            message: "To Date is required."
        },
        {
            type: "custom",
            message: "please select again To date Must not be less than From Date.",
            validationCallback: function (e) {
                var sd = $("#startdateBox").dxDateBox('instance').option('value');
                var ed = e.value;
                return ed && sd && ed.getTime() >= sd.getTime();
            }
        }
        ]
    });
    function numberWithCommas(x) {
        var parts = x.toString().split(".");
        parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        return parts.join(".");
    }

    const format = num => {
        const n = String(num),
            p = n.indexOf('.')
        return n.replace(
            /\d(?=(?:\d{3})+(?:\.|$))/g,
            (m, i) => p < 0 || i < p ? `${m},` : m
        )
    }
    function isNumeric(n) {
        return !isNaN(parseFloat(n)) && isFinite(n);
    }

    function filter() {        
        var check_enddate = $("#enddateBox").dxDateBox("instance").option('isValid');
        var check_startdate = $("#startdateBox").dxDateBox("instance").option('isValid');
        var total = [];
        if (check_enddate == true && check_startdate == true) {

            //console.log("start:", startdateBox);
            //console.log("end:", enddateBox);
            $.ajax({
                type: 'POST',
                url: "api/GridDCWIPbyProcessH/Filter",
                data: { "fromdate": startdateBox, "todate": enddateBox, "Process": Process },
                async: false,
                dataType: 'json',
                success: function (result) {
                    //console.log(result);
                    $.each(result, function (item, value) {

                        source = value;
                    });

                    $("#gridContainer").dxDataGrid({
                        dataSource: result,
                        onCellPrepared: function (e) {
                            if (e.rowType === "data" && e.column.dataField === "QtyOrder" && e.rowIndex != undefined) {
                                sumQtyOrder.push(e.data.QtyOrder);
                            }
                            if (e.rowType === "data" && e.column.dataField === "WIP" && e.rowIndex != undefined) {
                                sumWIP.push(e.data.WIP);
                            }

                            if (e.rowType === "data" && e.column.dataField === "NG" && e.rowIndex != undefined) {
                                sumNG.push(e.data.NG);
                            }

                            if (e.rowType === "data" && e.column.dataField === "NC" && e.rowIndex != undefined) {
                                sumNC.push(e.data.NC);
                            }

                            if (e.rowType === "data" && e.column.dataField === "WIPRate" && e.rowIndex != undefined) {
                                sumWIPRate.push(e.data.WIPRate);
                            }

                            if (e.rowType === "data" && e.column.dataField === "NGRate" && e.rowIndex != undefined) {
                                sumNGRate.push(e.data.NGRate);
                            }

                            if (e.rowType === "data" && e.column.dataField === "NCRate" && e.rowIndex != undefined) {
                                sumNCRate.push(e.data.NCRate);
                            }

                        },
                        customizeExportData: function (cols, rows) {
                            
                            rows.forEach(function (row) {
                                //console.log(row);
                                var total1 = 0;
                                var total2 = 0;
                                var total3 = 0;
                                var total4 = 0;
                                if (row.rowType == "data") {                                   
                                    //console.log(row.data)
                                    for (var x = 0; x < row.values.length; x++) {
                                        //console.log(isNumeric(row.values[x]));
                                        //if (isNumeric(row.values[x])) {
                                        //    format(parseFloat(row.values[x]).toFixed(2)).toString();
                                        //}
                                      
                                    }
                                }
                                if (row.rowType == "totalFooter") { //ดึงข้อมูลส่วนของ totalFooter ในแต่ละ column มา set ค่า ตอน export excel
                                    var rowValues = row.values;
                                    //console.log(rowValues);
                                    for (var i = 0; i < rowValues.length; i++) {

                                        if (typeof (rowValues[i]) === 'object') {
                                            //console.log(rowValues[i].name);
                                            if (rowValues[i].name === 'QtyOrder') {
                                                total1 = parseFloat(rowValues[i].value);
                                            }
                                            if (rowValues[i].name === 'WIP') {
                                                total2 = parseFloat(rowValues[i].value);
                                            }
                                            if (rowValues[i].name === 'NC') {
                                                total3 = parseFloat(rowValues[i].value);
                                            }
                                            if (rowValues[i].name === 'NG') {
                                                total4 = parseFloat(rowValues[i].value);
                                            }
                                            if (rowValues[i].name === 'WIPRate') {
                                                //rowValues[i].value = format(parseFloat((total2 / total1) * 100).toFixed(2)).toString();
                                                rowValues[i].value =parseFloat((total2 / total1) * 100);
                                            }
                                            if (rowValues[i].name === 'NCRate') {
                                                //rowValues[i].value = format(parseFloat((total3 / total1) * 100).toFixed(2)).toString();
                                                rowValues[i].value = parseFloat((total3 / total1) * 100);
                                            }
                                            if (rowValues[i].name === 'NGRate') {
                                                //rowValues[i].value = format(parseFloat((total4 / total1) * 100).toFixed(2)).toString();
                                                rowValues[i].value = parseFloat((total4 / total1) * 100);
                                            }
                                        }
                                    }
                                }
                            });
                        },
                        onContentReady: function (e) {
                            var gridItems = $("#gridContainer").dxDataGrid('instance');

                            var total1 = sumQtyOrder.reduce((a, b) => parseFloat(a) + parseFloat(b), 0);
                            var total2 = sumWIP.reduce((a, b) => parseFloat(a) + parseFloat(b), 0);
                            var total3 = sumNC.reduce((a, b) => parseFloat(a) + parseFloat(b), 0);
                            var total4 = sumNG.reduce((a, b) => parseFloat(a) + parseFloat(b), 0);
                            sumQtyOrder = [];
                            sumWIP = [];
                            sumNG = [];
                            sumNC = [];
                            sumWIPRate = [];
                            sumNGRate = [];
                            sumNCRate = [];

                            var summaryCells = e.component.getController('data').footerItems()[0].summaryCells;
                            $.each(summaryCells, function (item, value) {
                                if (value.length > 0) {
                                    //console.log(item + "=>" + value[0].name);
                                    var name = value[0].name;
                                    if (name == "QtyOrder") {
                                        gridItems.getController('data').footerItems()[0].summaryCells[item][0].value = format(parseFloat(total1).toFixed(2)).toString();
                                    }
                                    if (name == "WIP") {
                                        gridItems.getController('data').footerItems()[0].summaryCells[item][0].value = format(parseFloat(total2).toFixed(2)).toString();
                                    }
                                    if (name == "WIPRate") {
                                        if (total1 == 0 || total2 == 0) {
                                            gridItems.getController('data').footerItems()[0].summaryCells[item][0].value = format(parseFloat(0).toFixed(2)).toString();
                                        } else {
                                            gridItems.getController('data').footerItems()[0].summaryCells[item][0].value = format(parseFloat((total2 / total1) * 100).toFixed(2)).toString();
                                        }
                                    }
                                    if (name == "NC") {
                                        gridItems.getController('data').footerItems()[0].summaryCells[item][0].value = format(parseFloat(total3).toFixed(2)).toString();
                                    }
                                    if (name == "NCRate") {
                                        if (total1 == 0 || total3 == 0) {
                                            gridItems.getController('data').footerItems()[0].summaryCells[item][0].value = format(parseFloat(0).toFixed(2)).toString();
                                        } else {
                                            gridItems.getController('data').footerItems()[0].summaryCells[item][0].value = format(parseFloat((total3 / total1) * 100).toFixed(2)).toString();
                                        }
                                    }
                                    if (name == "NG") {
                                        gridItems.getController('data').footerItems()[0].summaryCells[item][0].value = format(parseFloat(total4).toFixed(2)).toString();
                                    }
                                    if (name == "NGRate") {
                                        if (total1 == 0 || total4 == 0) {
                                            gridItems.getController('data').footerItems()[0].summaryCells[item][0].value = format(parseFloat(0).toFixed(2)).toString();
                                        } else {
                                            gridItems.getController('data').footerItems()[0].summaryCells[item][0].value = format(parseFloat((total4 / total1) * 100).toFixed(2)).toString();
                                        }
                                    }
                                    gridItems.getView('footerView').render();
                                }

                            });
                            NotSelection(gridItems);
                            
                        },
                        summary: {
                            calculateCustomSummary: function (options) {
                                if (options.name == "QtyOrder") {
                                    if (options.summaryProcess == "start") {
                                        options.totalValue = 0;
                                    }
                                    if (options.summaryProcess == "calculate") {
                                        if (options.value) {
                                            options.totalValue += options.value["QtyOrder"];
                                        }
                                    }
                                }
                                if (options.name == "WIP") {
                                    if (options.summaryProcess == "start") {
                                        options.totalValue = 0;
                                    }
                                    if (options.summaryProcess == "calculate") {
                                        if (options.value) {
                                            options.totalValue += options.value["WIP"];
                                        }
                                    }
                                }
                               
                                if (options.name == "NC") {
                                    if (options.summaryProcess == "start") {
                                        options.totalValue = 0;
                                    }
                                    if (options.summaryProcess == "calculate") {
                                        if (options.value) {
                                            options.totalValue += options.value["NC"];
                                        }
                                    }
                                }
                               
                                if (options.name == "NG") {
                                    if (options.summaryProcess == "start") {
                                        options.totalValue = 0;
                                    }
                                    if (options.summaryProcess == "calculate") {
                                        if (options.value) {
                                            options.totalValue += options.value["NG"];                                            
                                        }
                                    }
                                }
                               
                            },
                            totalItems: [{
                                column: "Barcode",
                                alignment: "right",
                                customizeText: function (data) {
                                    return "Total:";
                                }
                            }, {
                                    showInColumn: "QtyOrder",
                                    name: "QtyOrder",
                                    summaryType: "custom",
                                    alignment: "right",
                                    valueFormat: "#,##0",
                                }, {
                                    showInColumn: "WIP",
                                    name: "WIP",
                                    summaryType: "custom",
                                    alignment: "right",
                                    valueFormat: "#,##0",

                                }, {
                                    showInColumn: "WIPRate",
                                    name: "WIPRate",
                                    summaryType: "custom",
                                    alignment: "right",
                                    valueFormat: "#,##0",
                                }, {
                                    showInColumn: "NC",
                                    name: "NC",
                                    summaryType: "custom",
                                    alignment: "right",
                                    valueFormat: "#,##0",
                                }, {
                                    showInColumn: "NCRate",
                                    name: "NCRate",
                                    summaryType: "custom",
                                    alignment: "right",
                                    valueFormat: "#,##0",
                                }, {
                                    showInColumn: "NG",
                                    name: "NG",
                                    summaryType: "custom",
                                    alignment: "right",
                                    valueFormat: "#,##0",
                                }, {
                                    showInColumn: "NGRate",
                                    name: "NGRate",
                                    summaryType: "custom",
                                    alignment: "right",
                                    valueFormat: "#,##0",

                                }]
                        }
                    });
                    $("#gridContainer").dxDataGrid("instance").refresh();

                },
                error: function (ob, errStr) {
                    DevExpress.ui.notify(errStr, "not available in the database", 2000);
                }
            });


        }        

    }


    function PrintPreview(data) {
        var grid = $('#gridContainer').dxDataGrid('instance');
        var keys = grid.getSelectedRowKeys();
        var text = "";
        var s;
        var comma = 0;
        //var checkslectDN = false;
        if (keys.length > 0) {
            for (s in keys) {
                comma = parseInt(s) + 1;
                if (comma == keys.length) {
                    text += keys[s].RowNumber;
                }
                else {
                    text += keys[s].RowNumber + ",";
                }
            }
           
            $.ajax({
                type: 'POST',
                url: "api/GridDCWIPbyProcessH/Print",
                data: { "RowNumber": text, "fromdate": startdateBox, "todate": enddateBox, "Process": Process },                
                //contentType: "application/json; charset=utf-8",
                //dataType: "html",
                //async: false,
                //dataType: 'json',
                success: function (e) {                    
                    
                    if (e) {
                        window.open('@Url.Action("Index", "PrintDCWIPbyProcessH")?process=' + Process + '&fromdate=' + startdateBox + '&todate=' + enddateBox, '_blank').focus();
                        //window.open('PrintWipMovement/Index?fromdate=' + startdateBox + '&todate=' + enddateBox + '&process=' + Process + '&FCode=' + FCode + '&ItemCode=' + ItemCode + '&Model=' + Model);
                    }
                   
                }
            });


        } else {
            var errorcustomDialog = DevExpress.ui.dialog.custom({
                title: 'print DC WIP by Process (History) incorrect ! ',
                message: 'Please select Row Data.',
                toolbarItems: [
                    { text: "Close", onClick: function () { return "Ok" } },
                    //{ text: "Not Ok", onClick: function () { return "Not Ok" } }
                ],
                width: "500px"

            });
            errorcustomDialog.show().done(function (dialogResult) {
                //focus something
            });
        }


    }
</script>