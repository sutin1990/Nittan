@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@using System.Net

<style>
    div.relative {
        position: relative;
        width: 100%;
        border: 1px solid lightgray;
        height: 70px;
    }

    div.absolute1 {
        position: absolute;
        left: 20px;
        width: 250px;
        /*height: 100px;*/
        /*border: 1px solid #73AD21;*/
    }

    div.absolute2 {
        position: absolute;
        /*top: 10px;*/
        left: 300px;
        width: 250px;
        /*height: 100px;*/
        /*border: 1px solid #73AD21;*/
    }

    div.absolute3 {
        position: absolute;
        top: 5px;
        left: 550px;
        /*height: 100px;*/
    }
</style>
<form>
    <br /><div class="relative">
        <div class="absolute1"><label style="padding-top:10px">Date From:</label><div id="startdateBox" style="left:80px; bottom:30px;"></div></div>
        <div class="absolute2"><label style="padding-top:10px">Date To:</label><div id="enddateBox" style="left:80px; bottom:30px;"></div></div>

        <div class="absolute3">

            @(Html.DevExtreme().Button()
                                        .ID("btnOK")
                                        .Text("Ok")
                                        .Type(ButtonType.Success)
                                        .OnClick("filter")
            )
        </div>
    </div>
    <br />


    @(Html.DevExtreme().DataGrid<MCP_WEB.Models.FGMovement>()
                                                            .ID("gridContainer")
                                                            .ShowBorders(true)
                                                            .Export(e => e.Enabled(true).FileName("FGMovement-" + DateTime.Now).AllowExportSelectedData(true))
                                                            .ColumnChooser(c => c.Enabled(true))
                                                            .AllowColumnResizing(true)
                                                            .AllowColumnReordering(true)
                                                            //.RemoteOperations(true)
                                                            .ShowRowLines(true)
                                                            .ColumnHidingEnabled(true)
                                                            .ColumnAutoWidth(true)
                                                            .ColumnMinWidth(100)
                                                            .Selection(s => s.Mode(SelectionMode.Multiple)
                                                                .ShowCheckBoxesMode(GridSelectionShowCheckBoxesMode.Always)
                                                                .SelectAllMode(SelectAllMode.Page)
                                                                )

                                                            .HoverStateEnabled(true)
                                                            .RowAlternationEnabled(true)
                                                            .Paging(paging => paging.PageSize(10))
                                                            .Pager(p => p
                                                                    .AllowedPageSizes(new int[] { 10, 25, 50, 100 })
                                                                    .ShowInfo(true)
                                                                    .ShowNavigationButtons(true)
                                                                    .ShowPageSizeSelector(true)
                                                                    .Visible(true))

                                                            //.DataSource(d => d.Mvc().Controller("GridWipMovement").LoadAction("Get_data"))

                                                            //.FilterPanel(f => f.Visible(true))
                                                            .HeaderFilter(h => h.Visible(true))
                                                            .FilterRow(filterRow => filterRow
                                                                    .Visible(true)
                                                                    .ApplyFilter(GridApplyFilterMode.Auto))
                                                            .SearchPanel(searchPanel => searchPanel
                                                                .Visible(true)
                                                                .Width(240)
                                                                .Placeholder("Search..."))

                                                            .Columns(columns =>
                                                            {

                                                                columns.Add().DataField("FCode").Caption("FCode");
                                                                columns.Add().DataField("Model").Caption("Model");
                                                                columns.Add().DataField("Uom").Caption("Unit");
                                                                columns.Add().DataField("BarCode").Caption("Serial Lot");
                                                                columns.Add().DataField("TransDate").Caption("TransDate").DataType(GridColumnDataType.DateTime).Format(ViewBag.FGmovementFormat);
                                                                columns.Add().DataField("qty").Caption("qty").Format("#,##0");

                                                            }) // end .Columns


    )
    <br />
    @{ var ip = HttpContextAccessor.HttpContext?.Connection?.RemoteIpAddress?.ToString();
        if (ip == "::1") { ip = Dns.GetHostEntry(Dns.GetHostName()).AddressList[1].ToString(); } }

    @*<input type="hidden" id="ipaddress" value="@ip" />*@
    @(Html.DevExtreme().Button()
                                        .ID("btnPrintPreviewT1")
                                        .Text("Print")
                                        .Type(ButtonType.Default)
                            //.UseSubmitBehavior(true)
                            .OnClick("PrintPreview")
    )

</form>

<script>


    var sumqty = [];
    var sumTRIN = [];
    var sumTROUT = [];
    var sumQtyMove = [];

    var startdateBox = new Date();
    startdateBox = startdateBox.getFullYear() + "-" + (startdateBox.getMonth() + 1) + "-" + startdateBox.getDate();
    var enddateBox = new Date();
    enddateBox = enddateBox.getFullYear() + "-" + (enddateBox.getMonth() + 1) + "-" + enddateBox.getDate();

    $("#startdateBox").dxDateBox({
        min: new Date(2000, 0, 1),
        max: new Date(2029, 11, 31),
        value: new Date(),
        displayFormat: "dd/MM/yyyy",
        formatString: 'shortdate',
        onValueChanged: function (e) {
            var ed = $("#enddateBox").dxDateBox('instance').option('value');
            if (e.value.getTime() >= ed.getTime()) {
                $("#enddateBox").dxDateBox("instance").option("isValid", true);//clear validate dateBox
            }
            startdateBox = e.value;
            startdateBox = startdateBox.getFullYear() + "-" + (startdateBox.getMonth() + 1) + "-" + startdateBox.getDate();

        },

    }).dxValidator({
        validationRules: [{
            type: "required",
            message: "From Date is required."
        },
        {
            type: "custom",
            message: "please select again From Date Must not be over To Date.",
            validationCallback: function (e) {
                var ed = $("#enddateBox").dxDateBox('instance').option('value');
                var sd = e.value;
                return sd && ed && sd.getTime() <= ed.getTime();
            }
        }
        ]
    });

    $("#enddateBox").dxDateBox({
        min: new Date(2000, 0, 1),
        max: new Date(2029, 11, 31),
        value: new Date(),
        displayFormat: "dd/MM/yyyy",
        formatString: 'dd MMM yyyy',
        onValueChanged: function (e) {
            var sd = $("#startdateBox").dxDateBox('instance').option('value');
            if (e.value.getTime() >= sd.getTime()) {
                $("#startdateBox").dxDateBox("instance").option("isValid", true);
            }
            enddateBox = e.value;
            enddateBox = enddateBox.getFullYear() + "-" + (enddateBox.getMonth() + 1) + "-" + enddateBox.getDate();

        }

    }).dxValidator({
        validationRules: [{
            type: "required",
            message: "To Date is required."
        },
        {
            type: "custom",
            message: "please select again To date Must not be less than From Date.",
            validationCallback: function (e) {
                var sd = $("#startdateBox").dxDateBox('instance').option('value');
                var ed = e.value;
                return ed && sd && ed.getTime() >= sd.getTime();
            }
        }
        ]
    });


    function filter() {
        var check_enddate = $("#enddateBox").dxDateBox("instance").option('isValid');
        var check_startdate = $("#startdateBox").dxDateBox("instance").option('isValid');
        var total = [];
        if (check_enddate == true && check_startdate == true) {

            //console.log("start:", startdateBox);
            //console.log("end:", enddateBox);
            $.ajax({
                type: 'POST',
                url: "api/GridFGMovement/Filter",
                data: { "fromdate": startdateBox, "todate": enddateBox},
                async: false,
                dataType: 'json',
                success: function (result) {
                    //console.log(result);
                    $.each(result, function (item, value) {

                        source = value;
                    });

                    $("#gridContainer").dxDataGrid({
                        dataSource: result,
                        columns: [
                            {
                                dataField: "FCode",
                                caption: "FCode",
                                showInColumnChooser: true
                            },
                            {
                                dataField: "Model",
                                caption: "Model",
                                showInColumnChooser: true,
                            },
                            {
                                dataField: "Uom",
                                caption: "Unit",
                                showInColumnChooser: true,
                            },
                            {
                                dataField: "BarCode",
                                caption: "Serial Lot",
                                showInColumnChooser: true,
                            },
                            {
                                dataField: "TransDate",
                                caption: "TransDate",
                                dataType: "date",
                                format: "@ViewBag.FGmovementFormat",
                                showInColumnChooser: true,

                            },
                            {
                                dataField: "qty",
                                format: "#,##0",
                                caption: "qty",
                                showInColumnChooser: true,
                            },

                        ],
                        onCellPrepared: function (e) {
                            if (e.rowType === "data" && e.column.dataField === "qty" && e.rowIndex != undefined) {
                                sumqty.push(e.data.qty);

                            }

                        },
                        onContentReady: function (e) {
                            var gridItems = $("#gridContainer").dxDataGrid('instance');

                            var total1 = sumqty.reduce((a, b) => parseFloat(a) + parseFloat(b), 0);
                            //console.log(sumQtyMove);
                            var summaryCells = e.component.getController('data').footerItems()[0].summaryCells;
                            $.each(summaryCells, function (item, value) {
                                if (value.length > 0) {
                                    //console.log(item + "=>" + value[0].name);
                                    var name = value[0].name;
                                    if (name == "qty") {
                                        gridItems.getController('data').footerItems()[0].summaryCells[item][0].value = total1;
                                    }
                                    gridItems.getView('footerView').render();
                                }
                            });
                            sumqty = [];
                            sumTRIN = [];
                            sumTROUT = [];
                            sumQtyMove = [];
                            NotSelection(gridItems);
                        },
                        summary: {
                            calculateCustomSummary: function (options) {
                                if (options.name == "qty") {
                                    if (options.summaryProcess == "start") {
                                        options.totalValue = 0;
                                    }
                                    if (options.summaryProcess == "calculate") {
                                        if (options.value) {
                                            options.totalValue += options.value["qty"];
                                        }
                                    }
                                }
                            },
                            totalItems: [
                                {
                                column: "TransDate",
                                alignment: "right",
                                customizeText: function (data) {
                                    return "Total:";
                                }
                            },{
                                showInColumn: "qty",
                                name: "qty",
                                summaryType: "custom",
                                alignment: "right",
                                valueFormat: "#,##0",
                                //displayFormat: "#,##0",
                                //customizeText: function (data) {
                                //    var sum = sumqty.reduce((a, b) => parseFloat(a) + parseFloat(b), 0);
                                //    var x = sum.toLocaleString(
                                //        undefined, // leave undefined to use the browser's locale,
                                //        // or use a string like 'en-US' to override it.
                                //        { minimumFractionDigits: 0 }
                                //    );
                                //    return "Total: " + x;
                                //}
                            }]
                        }
                    });
                    $("#gridContainer").dxDataGrid("instance").refresh();

                },
                error: function (ob, errStr) {
                    DevExpress.ui.notify(errStr, "This Rang TransDate is not available in the database", 2000);
                }
            });


        }

    }

    function PrintPreview(data) {
        var grid = $('#gridContainer').dxDataGrid('instance');
        var keys = grid.getSelectedRowKeys();
        var text = "";
        var s;
        var comma = 0;
        //var ipaddress = $("#ipaddress").val();

        //console.log(ipaddress);
        //var checkslectDN = false;
        if (keys.length > 0) {
            for (s in keys) {
                comma = parseInt(s) + 1;
                if (comma == keys.length) {
                    text += keys[s].RowNumber;
                }
                else {
                    text += keys[s].RowNumber + ",";
                }
            }
            //console.log(text);
            //console.log("date:",startdateBox +'->'+ enddateBox)
            //data.preventDefault();
            //var element = this;
            //window.open('api/ProductionDailyReport1_Print/PrintProductionDailyReport1?FCode=' + text);
            $.ajax({
                type: 'POST',
                url: "api/GridFGMovement/Print",
                data: { "RowNumber": text, "fromdate": startdateBox, "todate": enddateBox},
                //contentType: "application/json; charset=utf-8",
                //dataType: "html",
                //async: false,
                //dataType: 'json',
                success: function (e) {

                    if (e) {
                        window.open('@Url.Action("Index", "PrintFGMovement")?fromdate=' + startdateBox + '&todate=' + enddateBox, '_blank').focus();
                        //window.open('PrintWipMovement/Index?fromdate=' + startdateBox + '&todate=' + enddateBox + '&process=' + Process + '&FCode=' + FCode + '&ItemCode=' + ItemCode + '&Model=' + Model);
                    }

                }
            });

        } else {
            var errorcustomDialog = DevExpress.ui.dialog.custom({
                title: 'print FGMovement incorrect ! ',
                message: 'Please select Fcode.',
                toolbarItems: [
                    { text: "Close", onClick: function () { return "Ok" } },
                    //{ text: "Not Ok", onClick: function () { return "Not Ok" } }
                ],
                width: "500px"

            });
            errorcustomDialog.show().done(function (dialogResult) {
                //focus something
            });
        }
             @*window.open('@Url.Action("Index", "PrintProduction1")', '_blank').focus();*@

    }
</script>